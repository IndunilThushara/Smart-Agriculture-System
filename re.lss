
re.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000154c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000082  00800060  0000154c  000015e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003d  008000e2  008000e2  00001662  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001662  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000323  00000000  00000000  00001682  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a15  00000000  00000000  000019a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000311  00000000  00000000  000023ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000098e  00000000  00000000  000026cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  0000305c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038d  00000000  00000000  0000322c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e1  00000000  00000000  000035b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000389a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 84 02 	jmp	0x508	; 0x508 <__vector_1>
       8:	0c 94 83 01 	jmp	0x306	; 0x306 <__vector_2>
       c:	0c 94 ac 01 	jmp	0x358	; 0x358 <__vector_3>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <show_data+0xbc>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <light_intensity+0x20>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <port_init+0x2>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <UART_init+0x14>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	10 e0       	ldi	r17, 0x00	; 0
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	ec e4       	ldi	r30, 0x4C	; 76
     162:	f5 e1       	ldi	r31, 0x15	; 21
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a2 3e       	cpi	r26, 0xE2	; 226
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a2 ee       	ldi	r26, 0xE2	; 226
     174:	b0 e0       	ldi	r27, 0x00	; 0
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	af 31       	cpi	r26, 0x1F	; 31
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 81 05 	call	0xb02	; 0xb02 <main>
     184:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <ext_Interrupt>:
}


////////////////////////////////////////////////////////////////////////////
void ext_Interrupt(void){
    DDRD = DDRD & ~(1 << DDD2); // DDRD PIN2 as input - INT0 /CHANGE DISPLAY
     18c:	8a 98       	cbi	0x11, 2	; 17
    DDRD = DDRD & ~(1 << DDD3); // DDRD PIN3 as input - INT1 /Turn on edit mode
     18e:	8b 98       	cbi	0x11, 3	; 17
	DDRB = DDRB & ~(1 << DDB2); // DDRB PIN2 as input - INT2 / set value - Rotary encoder switch
     190:	ba 98       	cbi	0x17, 2	; 23
    GICR |= (1<<INT0) | (1<<INT1) | (1 << INT2); //enable external interrupt 0,1 & 2 ; INT0 = PD2 , INT1 = PD3
     192:	8b b7       	in	r24, 0x3b	; 59
     194:	80 6e       	ori	r24, 0xE0	; 224
     196:	8b bf       	out	0x3b, r24	; 59
    MCUCR |= (1<<ISC01) | (1<<ISC00) | (1<<ISC11) | (1<<ISC10); //INT1 and INT0 as Raising edge triggered interrupt
     198:	85 b7       	in	r24, 0x35	; 53
     19a:	8f 60       	ori	r24, 0x0F	; 15
     19c:	85 bf       	out	0x35, r24	; 53
	MCUCSR |= (1<<ISC2); //INT2 as Raising edge triggered interrupt 
     19e:	84 b7       	in	r24, 0x34	; 52
     1a0:	80 64       	ori	r24, 0x40	; 64
     1a2:	84 bf       	out	0x34, r24	; 52
}
     1a4:	08 95       	ret

000001a6 <UART_init>:

////////////////////////////////////////////////////////////////////////////////
//// USART Functions////
void UART_init(long USART_BAUDRATE)
{
     1a6:	9b 01       	movw	r18, r22
     1a8:	ac 01       	movw	r20, r24
	UCSRB |= (1 << RXEN) | (1 << TXEN);/* Turn on transmission and reception */
     1aa:	8a b1       	in	r24, 0x0a	; 10
     1ac:	88 61       	ori	r24, 0x18	; 24
     1ae:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);/* Use 8-bit character sizes */
     1b0:	80 b5       	in	r24, 0x20	; 32
     1b2:	86 68       	ori	r24, 0x86	; 134
     1b4:	80 bd       	out	0x20, r24	; 32
	UBRRL = BAUD_PRESCALE;		/* Load lower 8-bits of the baud rate value */
     1b6:	64 e0       	ldi	r22, 0x04	; 4
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d1 f7       	brne	.-12     	; 0x1b8 <UART_init+0x12>
     1c4:	60 e0       	ldi	r22, 0x00	; 0
     1c6:	72 e1       	ldi	r23, 0x12	; 18
     1c8:	8a e7       	ldi	r24, 0x7A	; 122
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	0e 94 a0 07 	call	0xf40	; 0xf40 <__udivmodsi4>
     1d0:	c9 01       	movw	r24, r18
     1d2:	da 01       	movw	r26, r20
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	29 b9       	out	0x09, r18	; 9
	UBRRH = (BAUD_PRESCALE >> 8);	/* Load upper 8-bits*/
     1d8:	01 97       	sbiw	r24, 0x01	; 1
     1da:	a1 09       	sbc	r26, r1
     1dc:	b1 09       	sbc	r27, r1
     1de:	89 2f       	mov	r24, r25
     1e0:	9a 2f       	mov	r25, r26
     1e2:	ab 2f       	mov	r26, r27
     1e4:	bb 27       	eor	r27, r27
     1e6:	80 bd       	out	0x20, r24	; 32
}
     1e8:	08 95       	ret

000001ea <UART_RxChar>:

////////////////

unsigned char UART_RxChar()
{
	while ((UCSRA & (1 << RXC)) == 0);/* Wait till data is received */
     1ea:	5f 9b       	sbis	0x0b, 7	; 11
     1ec:	fe cf       	rjmp	.-4      	; 0x1ea <UART_RxChar>
	return(UDR);			/* Return the byte*/
     1ee:	8c b1       	in	r24, 0x0c	; 12
}
     1f0:	08 95       	ret

000001f2 <UART_TxChar>:

////////////////

void UART_TxChar(char ch)
{
	while (! (UCSRA & (1<<UDRE)));	/* Wait for empty transmit buffer*/
     1f2:	5d 9b       	sbis	0x0b, 5	; 11
     1f4:	fe cf       	rjmp	.-4      	; 0x1f2 <UART_TxChar>
	UDR = ch ;
     1f6:	8c b9       	out	0x0c, r24	; 12
}
     1f8:	08 95       	ret

000001fa <UART_SendString>:

////////////////

void UART_SendString(char *str)
{
     1fa:	20 e0       	ldi	r18, 0x00	; 0
     1fc:	04 c0       	rjmp	.+8      	; 0x206 <UART_SendString+0xc>

////////////////

void UART_TxChar(char ch)
{
	while (! (UCSRA & (1<<UDRE)));	/* Wait for empty transmit buffer*/
     1fe:	5d 9b       	sbis	0x0b, 5	; 11
     200:	fe cf       	rjmp	.-4      	; 0x1fe <UART_SendString+0x4>
	UDR = ch ;
     202:	ec b9       	out	0x0c, r30	; 12
	unsigned char j=0;
	
	while (str[j]!=0)		/* Send string till null */
	{
		UART_TxChar(str[j]);	
		j++;
     204:	2f 5f       	subi	r18, 0xFF	; 255

void UART_SendString(char *str)
{
	unsigned char j=0;
	
	while (str[j]!=0)		/* Send string till null */
     206:	fc 01       	movw	r30, r24
     208:	e2 0f       	add	r30, r18
     20a:	f1 1d       	adc	r31, r1
     20c:	e0 81       	ld	r30, Z
     20e:	ee 23       	and	r30, r30
     210:	b1 f7       	brne	.-20     	; 0x1fe <UART_SendString+0x4>
	{
		UART_TxChar(str[j]);	
		j++;
	}
}
     212:	08 95       	ret

00000214 <machine>:
		
	}return;
}


void machine(){
     214:	ef 92       	push	r14
     216:	ff 92       	push	r15
     218:	0f 93       	push	r16
     21a:	1f 93       	push	r17
	// temperature low
	if(set_temp < temperature){
     21c:	60 91 d3 00 	lds	r22, 0x00D3
     220:	70 91 d4 00 	lds	r23, 0x00D4
     224:	e0 90 d9 00 	lds	r14, 0x00D9
     228:	f0 90 da 00 	lds	r15, 0x00DA
     22c:	00 91 db 00 	lds	r16, 0x00DB
     230:	10 91 dc 00 	lds	r17, 0x00DC
     234:	88 27       	eor	r24, r24
     236:	77 fd       	sbrc	r23, 7
     238:	80 95       	com	r24
     23a:	98 2f       	mov	r25, r24
     23c:	0e 94 89 06 	call	0xd12	; 0xd12 <__floatsisf>
     240:	a8 01       	movw	r20, r16
     242:	97 01       	movw	r18, r14
     244:	0e 94 1b 06 	call	0xc36	; 0xc36 <__cmpsf2>
     248:	88 23       	and	r24, r24
     24a:	14 f4       	brge	.+4      	; 0x250 <machine+0x3c>
		PORTA |= (1 << PA4); 		//HEATER TURN On
     24c:	dc 9a       	sbi	0x1b, 4	; 27
     24e:	11 c0       	rjmp	.+34     	; 0x272 <machine+0x5e>
	}else if(set_temp > temperature){
     250:	60 91 d3 00 	lds	r22, 0x00D3
     254:	70 91 d4 00 	lds	r23, 0x00D4
     258:	88 27       	eor	r24, r24
     25a:	77 fd       	sbrc	r23, 7
     25c:	80 95       	com	r24
     25e:	98 2f       	mov	r25, r24
     260:	0e 94 89 06 	call	0xd12	; 0xd12 <__floatsisf>
     264:	a8 01       	movw	r20, r16
     266:	97 01       	movw	r18, r14
     268:	0e 94 39 07 	call	0xe72	; 0xe72 <__gesf2>
     26c:	18 16       	cp	r1, r24
     26e:	0c f4       	brge	.+2      	; 0x272 <machine+0x5e>
		PORTA &= (~(1 << PA4));  	// HEATER TURN Off
     270:	dc 98       	cbi	0x1b, 4	; 27
	}
		
	// temperature high
	if(set_temp > temperature ){
     272:	60 91 d3 00 	lds	r22, 0x00D3
     276:	70 91 d4 00 	lds	r23, 0x00D4
     27a:	88 27       	eor	r24, r24
     27c:	77 fd       	sbrc	r23, 7
     27e:	80 95       	com	r24
     280:	98 2f       	mov	r25, r24
     282:	0e 94 89 06 	call	0xd12	; 0xd12 <__floatsisf>
     286:	a8 01       	movw	r20, r16
     288:	97 01       	movw	r18, r14
     28a:	0e 94 39 07 	call	0xe72	; 0xe72 <__gesf2>
     28e:	18 16       	cp	r1, r24
     290:	14 f4       	brge	.+4      	; 0x296 <machine+0x82>
		PORTA |= (1 << PA5); 	// FAN TURN ON
     292:	dd 9a       	sbi	0x1b, 5	; 27
     294:	01 c0       	rjmp	.+2      	; 0x298 <machine+0x84>
	}else {
		PORTA &= (~(1 << PA5));  		// FAN TURN OFF
     296:	dd 98       	cbi	0x1b, 5	; 27
	}
		
	// humidity
	if(set_humi < humidity){
     298:	60 91 d5 00 	lds	r22, 0x00D5
     29c:	70 91 d6 00 	lds	r23, 0x00D6
     2a0:	88 27       	eor	r24, r24
     2a2:	77 fd       	sbrc	r23, 7
     2a4:	80 95       	com	r24
     2a6:	98 2f       	mov	r25, r24
     2a8:	0e 94 89 06 	call	0xd12	; 0xd12 <__floatsisf>
     2ac:	20 91 dd 00 	lds	r18, 0x00DD
     2b0:	30 91 de 00 	lds	r19, 0x00DE
     2b4:	40 91 df 00 	lds	r20, 0x00DF
     2b8:	50 91 e0 00 	lds	r21, 0x00E0
     2bc:	0e 94 1b 06 	call	0xc36	; 0xc36 <__cmpsf2>
     2c0:	88 23       	and	r24, r24
     2c2:	14 f4       	brge	.+4      	; 0x2c8 <machine+0xb4>
		PORTA |= (1 << PA6);		// TURN ON MISTURE
     2c4:	de 9a       	sbi	0x1b, 6	; 27
     2c6:	01 c0       	rjmp	.+2      	; 0x2ca <machine+0xb6>
	}else{
		PORTA &= (~(1 << PA6));	// TURN OFF MISTURE
     2c8:	de 98       	cbi	0x1b, 6	; 27
	}
		
	// soil moisture
	if(set_soil < sm_moisture){
     2ca:	60 91 d7 00 	lds	r22, 0x00D7
     2ce:	70 91 d8 00 	lds	r23, 0x00D8
     2d2:	88 27       	eor	r24, r24
     2d4:	77 fd       	sbrc	r23, 7
     2d6:	80 95       	com	r24
     2d8:	98 2f       	mov	r25, r24
     2da:	0e 94 89 06 	call	0xd12	; 0xd12 <__floatsisf>
     2de:	20 91 e7 00 	lds	r18, 0x00E7
     2e2:	30 91 e8 00 	lds	r19, 0x00E8
     2e6:	40 91 e9 00 	lds	r20, 0x00E9
     2ea:	50 91 ea 00 	lds	r21, 0x00EA
     2ee:	0e 94 1b 06 	call	0xc36	; 0xc36 <__cmpsf2>
     2f2:	88 23       	and	r24, r24
     2f4:	14 f4       	brge	.+4      	; 0x2fa <machine+0xe6>
		PORTA |= (1 << PA7);		// TURN ON WATER PUMP
     2f6:	df 9a       	sbi	0x1b, 7	; 27
     2f8:	01 c0       	rjmp	.+2      	; 0x2fc <machine+0xe8>
	}else {
		PORTA &= (~(1 << PA7));	// TURN OFF WATER PUMP
     2fa:	df 98       	cbi	0x1b, 7	; 27
	}
}
     2fc:	1f 91       	pop	r17
     2fe:	0f 91       	pop	r16
     300:	ff 90       	pop	r15
     302:	ef 90       	pop	r14
     304:	08 95       	ret

00000306 <__vector_2>:
		}
	}
}

// turn on edit mode 
ISR(INT1_vect){
     306:	1f 92       	push	r1
     308:	0f 92       	push	r0
     30a:	0f b6       	in	r0, 0x3f	; 63
     30c:	0f 92       	push	r0
     30e:	11 24       	eor	r1, r1
     310:	8f 93       	push	r24

	switch (shift_btn) {
     312:	80 91 e2 00 	lds	r24, 0x00E2
     316:	82 30       	cpi	r24, 0x02	; 2
     318:	71 f0       	breq	.+28     	; 0x336 <__vector_2+0x30>
     31a:	83 30       	cpi	r24, 0x03	; 3
     31c:	28 f4       	brcc	.+10     	; 0x328 <__vector_2+0x22>
     31e:	88 23       	and	r24, r24
     320:	81 f0       	breq	.+32     	; 0x342 <__vector_2+0x3c>
     322:	81 30       	cpi	r24, 0x01	; 1
     324:	99 f4       	brne	.+38     	; 0x34c <__vector_2+0x46>
     326:	08 c0       	rjmp	.+16     	; 0x338 <__vector_2+0x32>
     328:	84 30       	cpi	r24, 0x04	; 4
     32a:	59 f0       	breq	.+22     	; 0x342 <__vector_2+0x3c>
     32c:	84 30       	cpi	r24, 0x04	; 4
     32e:	18 f0       	brcs	.+6      	; 0x336 <__vector_2+0x30>
     330:	85 30       	cpi	r24, 0x05	; 5
     332:	61 f4       	brne	.+24     	; 0x34c <__vector_2+0x46>
     334:	06 c0       	rjmp	.+12     	; 0x342 <__vector_2+0x3c>
		case 2:
			edit_btn = 1;
			set_btn = 0;
			break;
		case 3:
			edit_btn = 1;
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	80 93 e3 00 	sts	0x00E3, r24
			set_btn = 0;
     33c:	10 92 d2 00 	sts	0x00D2, r1
     340:	05 c0       	rjmp	.+10     	; 0x34c <__vector_2+0x46>
		case 4:
			edit_btn = 0;
			set_btn = 1;
			break;
		case 5:
			edit_btn = 0;
     342:	10 92 e3 00 	sts	0x00E3, r1
			set_btn = 1;
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	80 93 d2 00 	sts	0x00D2, r24
		default:
			// Handle any other values or errors if necessary
			break;
	}

}
     34c:	8f 91       	pop	r24
     34e:	0f 90       	pop	r0
     350:	0f be       	out	0x3f, r0	; 63
     352:	0f 90       	pop	r0
     354:	1f 90       	pop	r1
     356:	18 95       	reti

00000358 <__vector_3>:

// set variable value
ISR(INT2_vect){
     358:	1f 92       	push	r1
     35a:	0f 92       	push	r0
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	0f 92       	push	r0
     360:	11 24       	eor	r1, r1
     362:	8f 93       	push	r24
     364:	9f 93       	push	r25
	if(set_btn == 0){ 
     366:	80 91 d2 00 	lds	r24, 0x00D2
     36a:	88 23       	and	r24, r24
     36c:	39 f5       	brne	.+78     	; 0x3bc <__vector_3+0x64>
		
		edit_btn = 0;
     36e:	10 92 e3 00 	sts	0x00E3, r1
		set_btn = 1;
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	80 93 d2 00 	sts	0x00D2, r24
			
		switch (shift_btn) {
     378:	80 91 e2 00 	lds	r24, 0x00E2
     37c:	82 30       	cpi	r24, 0x02	; 2
     37e:	69 f0       	breq	.+26     	; 0x39a <__vector_3+0x42>
     380:	83 30       	cpi	r24, 0x03	; 3
     382:	a1 f0       	breq	.+40     	; 0x3ac <__vector_3+0x54>
     384:	81 30       	cpi	r24, 0x01	; 1
     386:	d1 f4       	brne	.+52     	; 0x3bc <__vector_3+0x64>
			case 0:
				break;
			case 1:
				set_temp = counter;
     388:	80 91 e4 00 	lds	r24, 0x00E4
     38c:	90 91 e5 00 	lds	r25, 0x00E5
     390:	90 93 d4 00 	sts	0x00D4, r25
     394:	80 93 d3 00 	sts	0x00D3, r24
     398:	11 c0       	rjmp	.+34     	; 0x3bc <__vector_3+0x64>
				break;
			case 2:
				set_humi = counter;
     39a:	80 91 e4 00 	lds	r24, 0x00E4
     39e:	90 91 e5 00 	lds	r25, 0x00E5
     3a2:	90 93 d6 00 	sts	0x00D6, r25
     3a6:	80 93 d5 00 	sts	0x00D5, r24
     3aa:	08 c0       	rjmp	.+16     	; 0x3bc <__vector_3+0x64>
				break;
			case 3:
				set_soil = counter;
     3ac:	80 91 e4 00 	lds	r24, 0x00E4
     3b0:	90 91 e5 00 	lds	r25, 0x00E5
     3b4:	90 93 d8 00 	sts	0x00D8, r25
     3b8:	80 93 d7 00 	sts	0x00D7, r24
			default:
				// Handle any other values or errors if necessary
				break;
		}
	}
}
     3bc:	9f 91       	pop	r25
     3be:	8f 91       	pop	r24
     3c0:	0f 90       	pop	r0
     3c2:	0f be       	out	0x3f, r0	; 63
     3c4:	0f 90       	pop	r0
     3c6:	1f 90       	pop	r1
     3c8:	18 95       	reti

000003ca <port_init>:
//////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////
void port_init(){
	// LCD
	DDRC = 0xFF;  // Port C- DATA for LCD display
     3ca:	8f ef       	ldi	r24, 0xFF	; 255
     3cc:	84 bb       	out	0x14, r24	; 20
	DDRD |= (1 << DDD5) | (1 << DDD6) | (1 << DDD7) ;// PD5,PD6,PD7 - INSTRUCTION- output/LCD
     3ce:	81 b3       	in	r24, 0x11	; 17
     3d0:	80 6e       	ori	r24, 0xE0	; 224
     3d2:	81 bb       	out	0x11, r24	; 17
	

	//ROTARY ENCODER -  PB0,PB1 , PB2 set as input pins - that output A and B connected
	DDRB &= (~(1 << DDB0)); // rotary encoder line A
     3d4:	b8 98       	cbi	0x17, 0	; 23
	DDRB &= (~(1 << DDB1)); // rotary encoder line B 
     3d6:	b9 98       	cbi	0x17, 1	; 23
	
	// SENOSRS inputs - ANALOG
	DDRA = 0b11110000 ;
     3d8:	80 ef       	ldi	r24, 0xF0	; 240
     3da:	8a bb       	out	0x1a, r24	; 26
	//DDRA |= (1 << PA4); // DDRA PIN4 as output - Heater
	//DDRA |= (1 << PA5); // DDRA PIN5 as output - Fan
	//DDRA |= (1 << PA6); // DDRA PIN6 as output - HUMIDITY/ mistures
	//DDRA |= (1 << PA7) ; // DDRA PIN7 as output -  WATER PUMP 

}
     3dc:	08 95       	ret

000003de <ADC_Init>:

//////  ADc register initialization //////////////

void ADC_Init(){
	
	ADCSRA = 0x87;		//  Enable ADC, fr/128  
     3de:	87 e8       	ldi	r24, 0x87	; 135
     3e0:	86 b9       	out	0x06, r24	; 6
}
     3e2:	08 95       	ret

000003e4 <sm_ADC_Read>:
////////////////////////////////////////////////////////////////
// Functions for Soil moisture value//

int sm_ADC_Read(){

	ADMUX = 0b01000000;		/* Vref: Avcc, ADC channel: 0  */
     3e4:	80 e4       	ldi	r24, 0x40	; 64
     3e6:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);	/* start conversion  */
     3e8:	36 9a       	sbi	0x06, 6	; 6
	while ((ADCSRA &(1<<ADIF))==0);	/* monitor end of conversion interrupt flag */
     3ea:	34 9b       	sbis	0x06, 4	; 6
     3ec:	fe cf       	rjmp	.-4      	; 0x3ea <sm_ADC_Read+0x6>
	ADCSRA |=(1<<ADIF);	/* set the ADIF bit of ADCSRA register */
     3ee:	34 9a       	sbi	0x06, 4	; 6
	return(ADCW);		/* return the ADCW */
     3f0:	24 b1       	in	r18, 0x04	; 4
     3f2:	35 b1       	in	r19, 0x05	; 5
}
     3f4:	c9 01       	movw	r24, r18
     3f6:	08 95       	ret

000003f8 <li_ADC_Read>:
////////////////////////////////////////////////////////////////
// Functions for Light Intensity value//

int li_ADC_Read(){

	ADMUX = 0b01000001;		/* Vref: Avcc, ADC channel: 0  */
     3f8:	81 e4       	ldi	r24, 0x41	; 65
     3fa:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);	/* start conversion  */
     3fc:	36 9a       	sbi	0x06, 6	; 6
	while ((ADCSRA &(1<<ADIF))==0);	/* monitor end of conversion interrupt flag */
     3fe:	34 9b       	sbis	0x06, 4	; 6
     400:	fe cf       	rjmp	.-4      	; 0x3fe <li_ADC_Read+0x6>
	ADCSRA |=(1<<ADIF);	/* set the ADIF bit of ADCSRA register */
     402:	34 9a       	sbi	0x06, 4	; 6
	return(ADCW);		/* return the ADCW */
     404:	24 b1       	in	r18, 0x04	; 4
     406:	35 b1       	in	r19, 0x05	; 5
}
     408:	c9 01       	movw	r24, r18
     40a:	08 95       	ret

0000040c <co_ADC_Read>:
////////////////////////////////////////////////////////////////
// Functions for CO gas level//

int co_ADC_Read(){

	ADMUX = 0b01000010;		/* Vref: Avcc, ADC channel: 0  */
     40c:	82 e4       	ldi	r24, 0x42	; 66
     40e:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);	/* start conversion  */
     410:	36 9a       	sbi	0x06, 6	; 6
	while ((ADCSRA &(1<<ADIF))==0);	/* monitor end of conversion interrupt flag */
     412:	34 9b       	sbis	0x06, 4	; 6
     414:	fe cf       	rjmp	.-4      	; 0x412 <co_ADC_Read+0x6>
	ADCSRA |=(1<<ADIF);	/* set the ADIF bit of ADCSRA register */
     416:	34 9a       	sbi	0x06, 4	; 6
	return(ADCW);		/* return the ADCW */
     418:	24 b1       	in	r18, 0x04	; 4
     41a:	35 b1       	in	r19, 0x05	; 5
}
     41c:	c9 01       	movw	r24, r18
     41e:	08 95       	ret

00000420 <LCD_Command>:

//////////////////////////////////////////////////////////////////////////////////////////////

/* commands for LCD display */
void LCD_Command(unsigned char cmnd){		
	LCD_Data_Port= cmnd;
     420:	85 bb       	out	0x15, r24	; 21
	LCD_Command_Port &= ~(1<<RS);	/* RS=0 command reg. */
     422:	95 98       	cbi	0x12, 5	; 18
	LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
     424:	96 98       	cbi	0x12, 6	; 18
	LCD_Command_Port |= (1<<EN);	/* Enable pulse */
     426:	97 9a       	sbi	0x12, 7	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	8a 95       	dec	r24
     42c:	f1 f7       	brne	.-4      	; 0x42a <LCD_Command+0xa>
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
     42e:	97 98       	cbi	0x12, 7	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     430:	80 e7       	ldi	r24, 0x70	; 112
     432:	97 e1       	ldi	r25, 0x17	; 23
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <LCD_Command+0x14>
	_delay_ms(3);
}
     438:	08 95       	ret

0000043a <LCD_Char>:

/* LCD data write function */
void LCD_Char (unsigned char char_data){	
	LCD_Data_Port= char_data;
     43a:	85 bb       	out	0x15, r24	; 21
	LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
     43c:	95 9a       	sbi	0x12, 5	; 18
	LCD_Command_Port &= ~(1<<RW);	/* RW=0 write operation */
     43e:	96 98       	cbi	0x12, 6	; 18
	LCD_Command_Port |= (1<<EN);	/* Enable Pulse */
     440:	97 9a       	sbi	0x12, 7	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     442:	82 e0       	ldi	r24, 0x02	; 2
     444:	8a 95       	dec	r24
     446:	f1 f7       	brne	.-4      	; 0x444 <LCD_Char+0xa>
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
     448:	97 98       	cbi	0x12, 7	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     44a:	80 ed       	ldi	r24, 0xD0	; 208
     44c:	97 e0       	ldi	r25, 0x07	; 7
     44e:	01 97       	sbiw	r24, 0x01	; 1
     450:	f1 f7       	brne	.-4      	; 0x44e <LCD_Char+0x14>
	_delay_ms(1);
}
     452:	08 95       	ret

00000454 <LCD_Init>:
     454:	80 e4       	ldi	r24, 0x40	; 64
     456:	9c e9       	ldi	r25, 0x9C	; 156
     458:	01 97       	sbiw	r24, 0x01	; 1
     45a:	f1 f7       	brne	.-4      	; 0x458 <LCD_Init+0x4>

/* LCD Initialize function */
void LCD_Init (void){
	_delay_ms(20);			/* LCD Power ON delay always >15ms */
	LCD_Command (0x38);		/* Initialization of 16X2 LCD in 8bit mode */
     45c:	88 e3       	ldi	r24, 0x38	; 56
     45e:	0e 94 10 02 	call	0x420	; 0x420 <LCD_Command>
	LCD_Command (0x0C);		/* Display ON Cursor OFF */
     462:	8c e0       	ldi	r24, 0x0C	; 12
     464:	0e 94 10 02 	call	0x420	; 0x420 <LCD_Command>
	LCD_Command (0x06);		/* Auto Increment cursor */
     468:	86 e0       	ldi	r24, 0x06	; 6
     46a:	0e 94 10 02 	call	0x420	; 0x420 <LCD_Command>
	LCD_Command (0x01);		/* Clear display */
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	0e 94 10 02 	call	0x420	; 0x420 <LCD_Command>
	LCD_Command (0x80);		/* Cursor at home position */
     474:	80 e8       	ldi	r24, 0x80	; 128
     476:	0e 94 10 02 	call	0x420	; 0x420 <LCD_Command>
}
     47a:	08 95       	ret

0000047c <LCD_String>:

/* Send string to LCD function */
void LCD_String (const unsigned char *str, unsigned char lenght){
     47c:	ef 92       	push	r14
     47e:	ff 92       	push	r15
     480:	0f 93       	push	r16
     482:	1f 93       	push	r17
     484:	cf 93       	push	r28
     486:	df 93       	push	r29
     488:	7c 01       	movw	r14, r24
     48a:	c0 e0       	ldi	r28, 0x00	; 0
     48c:	d0 e0       	ldi	r29, 0x00	; 0
	int i;
	for(i=0; i<lenght ;i++)		/* Send each char of string till the NULL */
     48e:	06 2f       	mov	r16, r22
     490:	10 e0       	ldi	r17, 0x00	; 0
     492:	07 c0       	rjmp	.+14     	; 0x4a2 <LCD_String+0x26>
	{
		LCD_Char (str[i]);
     494:	f7 01       	movw	r30, r14
     496:	ec 0f       	add	r30, r28
     498:	fd 1f       	adc	r31, r29
     49a:	80 81       	ld	r24, Z
     49c:	0e 94 1d 02 	call	0x43a	; 0x43a <LCD_Char>
}

/* Send string to LCD function */
void LCD_String (const unsigned char *str, unsigned char lenght){
	int i;
	for(i=0; i<lenght ;i++)		/* Send each char of string till the NULL */
     4a0:	21 96       	adiw	r28, 0x01	; 1
     4a2:	c0 17       	cp	r28, r16
     4a4:	d1 07       	cpc	r29, r17
     4a6:	b4 f3       	brlt	.-20     	; 0x494 <LCD_String+0x18>
	{
		LCD_Char (str[i]);
	}
}
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	1f 91       	pop	r17
     4ae:	0f 91       	pop	r16
     4b0:	ff 90       	pop	r15
     4b2:	ef 90       	pop	r14
     4b4:	08 95       	ret

000004b6 <LCD_String_xy>:

/* Send string to LCD with xy position */
void LCD_String_xy (char row, char pos, char *str,char lenght){
     4b6:	1f 93       	push	r17
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	ea 01       	movw	r28, r20
     4be:	12 2f       	mov	r17, r18
	if (row == 1 && pos<16){
     4c0:	81 30       	cpi	r24, 0x01	; 1
     4c2:	31 f4       	brne	.+12     	; 0x4d0 <LCD_String_xy+0x1a>
     4c4:	60 31       	cpi	r22, 0x10	; 16
     4c6:	88 f4       	brcc	.+34     	; 0x4ea <LCD_String_xy+0x34>
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
     4c8:	6f 70       	andi	r22, 0x0F	; 15
     4ca:	86 2f       	mov	r24, r22
     4cc:	80 68       	ori	r24, 0x80	; 128
     4ce:	07 c0       	rjmp	.+14     	; 0x4de <LCD_String_xy+0x28>
	LCD_String(str,lenght);		/* Call LCD string function */
	}

	else if (row == 2 && pos<16){
     4d0:	82 30       	cpi	r24, 0x02	; 2
     4d2:	59 f4       	brne	.+22     	; 0x4ea <LCD_String_xy+0x34>
     4d4:	60 31       	cpi	r22, 0x10	; 16
     4d6:	48 f4       	brcc	.+18     	; 0x4ea <LCD_String_xy+0x34>
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
     4d8:	6f 70       	andi	r22, 0x0F	; 15
     4da:	86 2f       	mov	r24, r22
     4dc:	80 6c       	ori	r24, 0xC0	; 192
     4de:	0e 94 10 02 	call	0x420	; 0x420 <LCD_Command>
	LCD_String(str,lenght);		/* Call LCD string function */
     4e2:	ce 01       	movw	r24, r28
     4e4:	61 2f       	mov	r22, r17
     4e6:	0e 94 3e 02 	call	0x47c	; 0x47c <LCD_String>
     4ea:	80 ed       	ldi	r24, 0xD0	; 208
     4ec:	97 e0       	ldi	r25, 0x07	; 7
     4ee:	01 97       	sbiw	r24, 0x01	; 1
     4f0:	f1 f7       	brne	.-4      	; 0x4ee <LCD_String_xy+0x38>
	}

	_delay_ms(1);
	
}
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	1f 91       	pop	r17
     4f8:	08 95       	ret

000004fa <LCD_Clear>:

void LCD_Clear(){
	LCD_Command (0x01);		/* clear display */
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	0e 94 10 02 	call	0x420	; 0x420 <LCD_Command>
	LCD_Command (0x80);		/* cursor at home position */
     500:	80 e8       	ldi	r24, 0x80	; 128
     502:	0e 94 10 02 	call	0x420	; 0x420 <LCD_Command>
}
     506:	08 95       	ret

00000508 <__vector_1>:

//////////////////////////////////////////////////////////////////////////////////
// *** button interrupts *1*5*///

// Shift Screen
ISR(INT0_vect){
     508:	1f 92       	push	r1
     50a:	0f 92       	push	r0
     50c:	0f b6       	in	r0, 0x3f	; 63
     50e:	0f 92       	push	r0
     510:	11 24       	eor	r1, r1
     512:	2f 93       	push	r18
     514:	3f 93       	push	r19
     516:	4f 93       	push	r20
     518:	5f 93       	push	r21
     51a:	6f 93       	push	r22
     51c:	7f 93       	push	r23
     51e:	8f 93       	push	r24
     520:	9f 93       	push	r25
     522:	af 93       	push	r26
     524:	bf 93       	push	r27
     526:	ef 93       	push	r30
     528:	ff 93       	push	r31

	if(edit_btn !=1){
     52a:	80 91 e3 00 	lds	r24, 0x00E3
     52e:	81 30       	cpi	r24, 0x01	; 1
     530:	a9 f1       	breq	.+106    	; 0x59c <__vector_1+0x94>
		
		LCD_Clear();
     532:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_Clear>
		
		
		switch (shift_btn) {
     536:	80 91 e2 00 	lds	r24, 0x00E2
     53a:	82 30       	cpi	r24, 0x02	; 2
     53c:	b1 f0       	breq	.+44     	; 0x56a <__vector_1+0x62>
     53e:	83 30       	cpi	r24, 0x03	; 3
     540:	28 f4       	brcc	.+10     	; 0x54c <__vector_1+0x44>
     542:	88 23       	and	r24, r24
     544:	41 f1       	breq	.+80     	; 0x596 <__vector_1+0x8e>
     546:	81 30       	cpi	r24, 0x01	; 1
     548:	49 f5       	brne	.+82     	; 0x59c <__vector_1+0x94>
     54a:	07 c0       	rjmp	.+14     	; 0x55a <__vector_1+0x52>
     54c:	84 30       	cpi	r24, 0x04	; 4
     54e:	09 f1       	breq	.+66     	; 0x592 <__vector_1+0x8a>
     550:	84 30       	cpi	r24, 0x04	; 4
     552:	98 f0       	brcs	.+38     	; 0x57a <__vector_1+0x72>
     554:	85 30       	cpi	r24, 0x05	; 5
     556:	11 f5       	brne	.+68     	; 0x59c <__vector_1+0x94>
     558:	1e c0       	rjmp	.+60     	; 0x596 <__vector_1+0x8e>
			case 0:
				shift_btn = 1;
				break;
			case 1:
				shift_btn = 2;
     55a:	82 e0       	ldi	r24, 0x02	; 2
     55c:	80 93 e2 00 	sts	0x00E2, r24
				counter = set_temp ;
     560:	80 91 d3 00 	lds	r24, 0x00D3
     564:	90 91 d4 00 	lds	r25, 0x00D4
     568:	0f c0       	rjmp	.+30     	; 0x588 <__vector_1+0x80>
				break;
			case 2:
				shift_btn = 3;
     56a:	83 e0       	ldi	r24, 0x03	; 3
     56c:	80 93 e2 00 	sts	0x00E2, r24
				counter = set_humi ;
     570:	80 91 d5 00 	lds	r24, 0x00D5
     574:	90 91 d6 00 	lds	r25, 0x00D6
     578:	07 c0       	rjmp	.+14     	; 0x588 <__vector_1+0x80>
				break;
			case 3:
				shift_btn = 4;
     57a:	84 e0       	ldi	r24, 0x04	; 4
     57c:	80 93 e2 00 	sts	0x00E2, r24
				counter = set_soil ;
     580:	80 91 d7 00 	lds	r24, 0x00D7
     584:	90 91 d8 00 	lds	r25, 0x00D8
     588:	90 93 e5 00 	sts	0x00E5, r25
     58c:	80 93 e4 00 	sts	0x00E4, r24
     590:	05 c0       	rjmp	.+10     	; 0x59c <__vector_1+0x94>
				break;
			case 4:
				shift_btn = 5;
     592:	85 e0       	ldi	r24, 0x05	; 5
     594:	01 c0       	rjmp	.+2      	; 0x598 <__vector_1+0x90>
				break;
			case 5:
				shift_btn = 1;
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	80 93 e2 00 	sts	0x00E2, r24
			default:
				// Handle any other values or errors if necessary
				break;
		}
	}
}
     59c:	ff 91       	pop	r31
     59e:	ef 91       	pop	r30
     5a0:	bf 91       	pop	r27
     5a2:	af 91       	pop	r26
     5a4:	9f 91       	pop	r25
     5a6:	8f 91       	pop	r24
     5a8:	7f 91       	pop	r23
     5aa:	6f 91       	pop	r22
     5ac:	5f 91       	pop	r21
     5ae:	4f 91       	pop	r20
     5b0:	3f 91       	pop	r19
     5b2:	2f 91       	pop	r18
     5b4:	0f 90       	pop	r0
     5b6:	0f be       	out	0x3f, r0	; 63
     5b8:	0f 90       	pop	r0
     5ba:	1f 90       	pop	r1
     5bc:	18 95       	reti

000005be <cogas_level>:
	while ((ADCSRA &(1<<ADIF))==0);	/* monitor end of conversion interrupt flag */
	ADCSRA |=(1<<ADIF);	/* set the ADIF bit of ADCSRA register */
	return(ADCW);		/* return the ADCW */
}

float cogas_level(){
     5be:	0f 93       	push	r16
     5c0:	1f 93       	push	r17

	co_adc_value = co_ADC_Read();	/* Copy the ADC value */
     5c2:	0e 94 06 02 	call	0x40c	; 0x40c <co_ADC_Read>
     5c6:	90 93 1e 01 	sts	0x011E, r25
     5ca:	80 93 1d 01 	sts	0x011D, r24
	co_level = 100-(co_adc_value*100.00)/1023.00; /* Calculate light intensity in % */
     5ce:	aa 27       	eor	r26, r26
     5d0:	97 fd       	sbrc	r25, 7
     5d2:	a0 95       	com	r26
     5d4:	ba 2f       	mov	r27, r26
     5d6:	bc 01       	movw	r22, r24
     5d8:	cd 01       	movw	r24, r26
     5da:	0e 94 89 06 	call	0xd12	; 0xd12 <__floatsisf>
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	48 ec       	ldi	r20, 0xC8	; 200
     5e4:	52 e4       	ldi	r21, 0x42	; 66
     5e6:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__mulsf3>
     5ea:	20 e0       	ldi	r18, 0x00	; 0
     5ec:	30 ec       	ldi	r19, 0xC0	; 192
     5ee:	4f e7       	ldi	r20, 0x7F	; 127
     5f0:	54 ec       	ldi	r21, 0xC4	; 196
     5f2:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__divsf3>
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	48 ec       	ldi	r20, 0xC8	; 200
     5fc:	52 e4       	ldi	r21, 0x42	; 66
     5fe:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__addsf3>
     602:	9b 01       	movw	r18, r22
     604:	ac 01       	movw	r20, r24
     606:	20 93 f8 00 	sts	0x00F8, r18
     60a:	30 93 f9 00 	sts	0x00F9, r19
     60e:	40 93 fa 00 	sts	0x00FA, r20
     612:	50 93 fb 00 	sts	0x00FB, r21
	dtostrf(co_level,3,1,co_array);
     616:	43 e0       	ldi	r20, 0x03	; 3
     618:	21 e0       	ldi	r18, 0x01	; 1
     61a:	03 e0       	ldi	r16, 0x03	; 3
     61c:	11 e0       	ldi	r17, 0x01	; 1
     61e:	0e 94 c2 07 	call	0xf84	; 0xf84 <dtostrf>
	strcat(co_array,"%   ");	/* Concatenate unit of % */
     622:	c8 01       	movw	r24, r16
     624:	60 e6       	ldi	r22, 0x60	; 96
     626:	70 e0       	ldi	r23, 0x00	; 0
     628:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <strcat>
	
	if(shift_btn== 5){
     62c:	80 91 e2 00 	lds	r24, 0x00E2
     630:	85 30       	cpi	r24, 0x05	; 5
     632:	31 f4       	brne	.+12     	; 0x640 <cogas_level+0x82>
		
		LCD_String_xy (2,4,co_array,4);
     634:	82 e0       	ldi	r24, 0x02	; 2
     636:	64 e0       	ldi	r22, 0x04	; 4
     638:	a8 01       	movw	r20, r16
     63a:	24 e0       	ldi	r18, 0x04	; 4
     63c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_String_xy>
	}
	
	memset(co_array,0,10);
     640:	8a e0       	ldi	r24, 0x0A	; 10
     642:	e3 e0       	ldi	r30, 0x03	; 3
     644:	f1 e0       	ldi	r31, 0x01	; 1
     646:	df 01       	movw	r26, r30
     648:	1d 92       	st	X+, r1
     64a:	8a 95       	dec	r24
     64c:	e9 f7       	brne	.-6      	; 0x648 <cogas_level+0x8a>
     64e:	84 ef       	ldi	r24, 0xF4	; 244
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	28 ec       	ldi	r18, 0xC8	; 200
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	f9 01       	movw	r30, r18
     658:	31 97       	sbiw	r30, 0x01	; 1
     65a:	f1 f7       	brne	.-4      	; 0x658 <cogas_level+0x9a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     65c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     65e:	d9 f7       	brne	.-10     	; 0x656 <cogas_level+0x98>
	_delay_ms(50);		
	return co_level;
}
     660:	20 91 f8 00 	lds	r18, 0x00F8
     664:	30 91 f9 00 	lds	r19, 0x00F9
     668:	40 91 fa 00 	lds	r20, 0x00FA
     66c:	50 91 fb 00 	lds	r21, 0x00FB
     670:	b9 01       	movw	r22, r18
     672:	ca 01       	movw	r24, r20
     674:	1f 91       	pop	r17
     676:	0f 91       	pop	r16
     678:	08 95       	ret

0000067a <light_intensity>:
	while ((ADCSRA &(1<<ADIF))==0);	/* monitor end of conversion interrupt flag */
	ADCSRA |=(1<<ADIF);	/* set the ADIF bit of ADCSRA register */
	return(ADCW);		/* return the ADCW */
}

float light_intensity(){
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17

	li_adc_value = li_ADC_Read();	/* Copy the ADC value */
     67e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <li_ADC_Read>
     682:	90 93 f6 00 	sts	0x00F6, r25
     686:	80 93 f5 00 	sts	0x00F5, r24
	
	li_intensity = 100-(li_adc_value*100.00)/1023.00; /* Calculate light intensity in % */
     68a:	aa 27       	eor	r26, r26
     68c:	97 fd       	sbrc	r25, 7
     68e:	a0 95       	com	r26
     690:	ba 2f       	mov	r27, r26
     692:	bc 01       	movw	r22, r24
     694:	cd 01       	movw	r24, r26
     696:	0e 94 89 06 	call	0xd12	; 0xd12 <__floatsisf>
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	48 ec       	ldi	r20, 0xC8	; 200
     6a0:	52 e4       	ldi	r21, 0x42	; 66
     6a2:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__mulsf3>
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	30 ec       	ldi	r19, 0xC0	; 192
     6aa:	4f e7       	ldi	r20, 0x7F	; 127
     6ac:	54 ec       	ldi	r21, 0xC4	; 196
     6ae:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__divsf3>
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	48 ec       	ldi	r20, 0xC8	; 200
     6b8:	52 e4       	ldi	r21, 0x42	; 66
     6ba:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__addsf3>
     6be:	9b 01       	movw	r18, r22
     6c0:	ac 01       	movw	r20, r24
     6c2:	20 93 fc 00 	sts	0x00FC, r18
     6c6:	30 93 fd 00 	sts	0x00FD, r19
     6ca:	40 93 fe 00 	sts	0x00FE, r20
     6ce:	50 93 ff 00 	sts	0x00FF, r21
	
	dtostrf(li_intensity,3,1,li_array);
     6d2:	43 e0       	ldi	r20, 0x03	; 3
     6d4:	21 e0       	ldi	r18, 0x01	; 1
     6d6:	02 e1       	ldi	r16, 0x12	; 18
     6d8:	11 e0       	ldi	r17, 0x01	; 1
     6da:	0e 94 c2 07 	call	0xf84	; 0xf84 <dtostrf>
	strcat(li_array,"%   ");	/* Concatenate unit of % */
     6de:	c8 01       	movw	r24, r16
     6e0:	60 e6       	ldi	r22, 0x60	; 96
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <strcat>
	
	if(shift_btn==4){
     6e8:	80 91 e2 00 	lds	r24, 0x00E2
     6ec:	84 30       	cpi	r24, 0x04	; 4
     6ee:	31 f4       	brne	.+12     	; 0x6fc <light_intensity+0x82>
		
		LCD_String_xy (2,4,li_array,5);
     6f0:	82 e0       	ldi	r24, 0x02	; 2
     6f2:	64 e0       	ldi	r22, 0x04	; 4
     6f4:	a8 01       	movw	r20, r16
     6f6:	25 e0       	ldi	r18, 0x05	; 5
     6f8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_String_xy>
	}
	
	memset(li_array,0,10);
     6fc:	8a e0       	ldi	r24, 0x0A	; 10
     6fe:	e2 e1       	ldi	r30, 0x12	; 18
     700:	f1 e0       	ldi	r31, 0x01	; 1
     702:	df 01       	movw	r26, r30
     704:	1d 92       	st	X+, r1
     706:	8a 95       	dec	r24
     708:	e9 f7       	brne	.-6      	; 0x704 <light_intensity+0x8a>
     70a:	84 ef       	ldi	r24, 0xF4	; 244
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	28 ec       	ldi	r18, 0xC8	; 200
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	f9 01       	movw	r30, r18
     714:	31 97       	sbiw	r30, 0x01	; 1
     716:	f1 f7       	brne	.-4      	; 0x714 <light_intensity+0x9a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     718:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     71a:	d9 f7       	brne	.-10     	; 0x712 <light_intensity+0x98>
	_delay_ms(50);		
	return li_intensity;
}
     71c:	20 91 fc 00 	lds	r18, 0x00FC
     720:	30 91 fd 00 	lds	r19, 0x00FD
     724:	40 91 fe 00 	lds	r20, 0x00FE
     728:	50 91 ff 00 	lds	r21, 0x00FF
     72c:	b9 01       	movw	r22, r18
     72e:	ca 01       	movw	r24, r20
     730:	1f 91       	pop	r17
     732:	0f 91       	pop	r16
     734:	08 95       	ret

00000736 <soil_moisture>:
	ADCSRA |=(1<<ADIF);	/* set the ADIF bit of ADCSRA register */
	return(ADCW);		/* return the ADCW */
}


float soil_moisture(){
     736:	0f 93       	push	r16
     738:	1f 93       	push	r17

	sm_adc_value = sm_ADC_Read();	/* Copy the ADC value */
     73a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <sm_ADC_Read>
     73e:	90 93 02 01 	sts	0x0102, r25
     742:	80 93 01 01 	sts	0x0101, r24
	sm_moisture = 100-(sm_adc_value*100.00)/1023.00; /* Calculate moisture in % */
     746:	aa 27       	eor	r26, r26
     748:	97 fd       	sbrc	r25, 7
     74a:	a0 95       	com	r26
     74c:	ba 2f       	mov	r27, r26
     74e:	bc 01       	movw	r22, r24
     750:	cd 01       	movw	r24, r26
     752:	0e 94 89 06 	call	0xd12	; 0xd12 <__floatsisf>
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	48 ec       	ldi	r20, 0xC8	; 200
     75c:	52 e4       	ldi	r21, 0x42	; 66
     75e:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__mulsf3>
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 ec       	ldi	r19, 0xC0	; 192
     766:	4f e7       	ldi	r20, 0x7F	; 127
     768:	54 ec       	ldi	r21, 0xC4	; 196
     76a:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__divsf3>
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	48 ec       	ldi	r20, 0xC8	; 200
     774:	52 e4       	ldi	r21, 0x42	; 66
     776:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__addsf3>
     77a:	9b 01       	movw	r18, r22
     77c:	ac 01       	movw	r20, r24
     77e:	20 93 e7 00 	sts	0x00E7, r18
     782:	30 93 e8 00 	sts	0x00E8, r19
     786:	40 93 e9 00 	sts	0x00E9, r20
     78a:	50 93 ea 00 	sts	0x00EA, r21


	dtostrf(sm_moisture,3,1,sm_array);
     78e:	43 e0       	ldi	r20, 0x03	; 3
     790:	21 e0       	ldi	r18, 0x01	; 1
     792:	0b ee       	ldi	r16, 0xEB	; 235
     794:	10 e0       	ldi	r17, 0x00	; 0
     796:	0e 94 c2 07 	call	0xf84	; 0xf84 <dtostrf>
	strcat(sm_array,"%   ");	/* Concatenate unit of % */
     79a:	c8 01       	movw	r24, r16
     79c:	60 e6       	ldi	r22, 0x60	; 96
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <strcat>
	
	if(shift_btn==3){
     7a4:	80 91 e2 00 	lds	r24, 0x00E2
     7a8:	83 30       	cpi	r24, 0x03	; 3
     7aa:	31 f4       	brne	.+12     	; 0x7b8 <soil_moisture+0x82>
		
		LCD_String_xy (2,4,sm_array,5);
     7ac:	82 e0       	ldi	r24, 0x02	; 2
     7ae:	64 e0       	ldi	r22, 0x04	; 4
     7b0:	a8 01       	movw	r20, r16
     7b2:	25 e0       	ldi	r18, 0x05	; 5
     7b4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_String_xy>
	}
	
	
	
	memset(sm_array,0,10);
     7b8:	8a e0       	ldi	r24, 0x0A	; 10
     7ba:	eb ee       	ldi	r30, 0xEB	; 235
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	df 01       	movw	r26, r30
     7c0:	1d 92       	st	X+, r1
     7c2:	8a 95       	dec	r24
     7c4:	e9 f7       	brne	.-6      	; 0x7c0 <soil_moisture+0x8a>
     7c6:	84 ef       	ldi	r24, 0xF4	; 244
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	28 ec       	ldi	r18, 0xC8	; 200
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	f9 01       	movw	r30, r18
     7d0:	31 97       	sbiw	r30, 0x01	; 1
     7d2:	f1 f7       	brne	.-4      	; 0x7d0 <soil_moisture+0x9a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7d6:	d9 f7       	brne	.-10     	; 0x7ce <soil_moisture+0x98>
	_delay_ms(50);		
	return sm_moisture;
	
	
}
     7d8:	20 91 e7 00 	lds	r18, 0x00E7
     7dc:	30 91 e8 00 	lds	r19, 0x00E8
     7e0:	40 91 e9 00 	lds	r20, 0x00E9
     7e4:	50 91 ea 00 	lds	r21, 0x00EA
     7e8:	b9 01       	movw	r22, r18
     7ea:	ca 01       	movw	r24, r20
     7ec:	1f 91       	pop	r17
     7ee:	0f 91       	pop	r16
     7f0:	08 95       	ret

000007f2 <UART_SendFloat>:
}

///////////////////

void UART_SendFloat(float number)
{
     7f2:	ef 92       	push	r14
     7f4:	ff 92       	push	r15
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
     7fa:	df 93       	push	r29
     7fc:	cf 93       	push	r28
     7fe:	cd b7       	in	r28, 0x3d	; 61
     800:	de b7       	in	r29, 0x3e	; 62
     802:	6e 97       	sbiw	r28, 0x1e	; 30
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	f8 94       	cli
     808:	de bf       	out	0x3e, r29	; 62
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	cd bf       	out	0x3d, r28	; 61
    char buffer[30];
	dtostrf(number,5,3,buffer);
     80e:	45 e0       	ldi	r20, 0x05	; 5
     810:	23 e0       	ldi	r18, 0x03	; 3
     812:	7e 01       	movw	r14, r28
     814:	08 94       	sec
     816:	e1 1c       	adc	r14, r1
     818:	f1 1c       	adc	r15, r1
     81a:	87 01       	movw	r16, r14
     81c:	0e 94 c2 07 	call	0xf84	; 0xf84 <dtostrf>
	UART_SendString(buffer);
     820:	c7 01       	movw	r24, r14
     822:	0e 94 fd 00 	call	0x1fa	; 0x1fa <UART_SendString>
	memset(buffer,0,10);
     826:	8a e0       	ldi	r24, 0x0A	; 10
     828:	f7 01       	movw	r30, r14
     82a:	11 92       	st	Z+, r1
     82c:	8a 95       	dec	r24
     82e:	e9 f7       	brne	.-6      	; 0x82a <UART_SendFloat+0x38>
}
     830:	6e 96       	adiw	r28, 0x1e	; 30
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	f8 94       	cli
     836:	de bf       	out	0x3e, r29	; 62
     838:	0f be       	out	0x3f, r0	; 63
     83a:	cd bf       	out	0x3d, r28	; 61
     83c:	cf 91       	pop	r28
     83e:	df 91       	pop	r29
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	ff 90       	pop	r15
     846:	ef 90       	pop	r14
     848:	08 95       	ret

0000084a <UART_sendData>:

////////////////////

void UART_sendData()
{
		UART_SendFloat(temperature);
     84a:	60 91 d9 00 	lds	r22, 0x00D9
     84e:	70 91 da 00 	lds	r23, 0x00DA
     852:	80 91 db 00 	lds	r24, 0x00DB
     856:	90 91 dc 00 	lds	r25, 0x00DC
     85a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <UART_SendFloat>
		UART_SendString("A");
     85e:	85 e6       	ldi	r24, 0x65	; 101
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 fd 00 	call	0x1fa	; 0x1fa <UART_SendString>
		UART_SendFloat(humidity);
     866:	60 91 dd 00 	lds	r22, 0x00DD
     86a:	70 91 de 00 	lds	r23, 0x00DE
     86e:	80 91 df 00 	lds	r24, 0x00DF
     872:	90 91 e0 00 	lds	r25, 0x00E0
     876:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <UART_SendFloat>
		UART_SendString("B");
     87a:	87 e6       	ldi	r24, 0x67	; 103
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <UART_SendString>
		UART_SendFloat(sm_moisture);
     882:	60 91 e7 00 	lds	r22, 0x00E7
     886:	70 91 e8 00 	lds	r23, 0x00E8
     88a:	80 91 e9 00 	lds	r24, 0x00E9
     88e:	90 91 ea 00 	lds	r25, 0x00EA
     892:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <UART_SendFloat>
		UART_SendString("C");
     896:	89 e6       	ldi	r24, 0x69	; 105
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <UART_SendString>
		UART_SendFloat(li_intensity);
     89e:	60 91 fc 00 	lds	r22, 0x00FC
     8a2:	70 91 fd 00 	lds	r23, 0x00FD
     8a6:	80 91 fe 00 	lds	r24, 0x00FE
     8aa:	90 91 ff 00 	lds	r25, 0x00FF
     8ae:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <UART_SendFloat>
		UART_SendString("D");
     8b2:	8b e6       	ldi	r24, 0x6B	; 107
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <UART_SendString>
		UART_SendFloat(co_level);
     8ba:	60 91 f8 00 	lds	r22, 0x00F8
     8be:	70 91 f9 00 	lds	r23, 0x00F9
     8c2:	80 91 fa 00 	lds	r24, 0x00FA
     8c6:	90 91 fb 00 	lds	r25, 0x00FB
     8ca:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <UART_SendFloat>
		UART_SendString("E");
     8ce:	8d e6       	ldi	r24, 0x6D	; 109
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <UART_SendString>
		UART_SendString("\n");
     8d6:	8f e6       	ldi	r24, 0x6F	; 111
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	0e 94 fd 00 	call	0x1fa	; 0x1fa <UART_SendString>
     8de:	80 e1       	ldi	r24, 0x10	; 16
     8e0:	97 e2       	ldi	r25, 0x27	; 39
     8e2:	28 ec       	ldi	r18, 0xC8	; 200
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	f9 01       	movw	r30, r18
     8e8:	31 97       	sbiw	r30, 0x01	; 1
     8ea:	f1 f7       	brne	.-4      	; 0x8e8 <__stack+0x89>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8ee:	d9 f7       	brne	.-10     	; 0x8e6 <__stack+0x87>
		
		_delay_ms(1000);
}
     8f0:	08 95       	ret

000008f2 <show_data>:
	}
}



void show_data(uint8_t shift_btn,int counter){
     8f2:	0f 93       	push	r16
     8f4:	1f 93       	push	r17
     8f6:	df 93       	push	r29
     8f8:	cf 93       	push	r28
     8fa:	00 d0       	rcall	.+0      	; 0x8fc <show_data+0xa>
     8fc:	0f 92       	push	r0
     8fe:	cd b7       	in	r28, 0x3d	; 61
     900:	de b7       	in	r29, 0x3e	; 62
	
    char set_val_temp[1];
	char set_val_hum[1];
	char set_val_soil[1];

    switch (shift_btn) {
     902:	83 30       	cpi	r24, 0x03	; 3
     904:	09 f4       	brne	.+2      	; 0x908 <show_data+0x16>
     906:	49 c0       	rjmp	.+146    	; 0x99a <show_data+0xa8>
     908:	84 30       	cpi	r24, 0x04	; 4
     90a:	30 f4       	brcc	.+12     	; 0x918 <show_data+0x26>
     90c:	81 30       	cpi	r24, 0x01	; 1
     90e:	59 f0       	breq	.+22     	; 0x926 <show_data+0x34>
     910:	82 30       	cpi	r24, 0x02	; 2
     912:	09 f0       	breq	.+2      	; 0x916 <show_data+0x24>
     914:	8c c0       	rjmp	.+280    	; 0xa2e <show_data+0x13c>
     916:	24 c0       	rjmp	.+72     	; 0x960 <show_data+0x6e>
     918:	84 30       	cpi	r24, 0x04	; 4
     91a:	09 f4       	brne	.+2      	; 0x91e <show_data+0x2c>
     91c:	67 c0       	rjmp	.+206    	; 0x9ec <show_data+0xfa>
     91e:	85 30       	cpi	r24, 0x05	; 5
     920:	09 f0       	breq	.+2      	; 0x924 <show_data+0x32>
     922:	85 c0       	rjmp	.+266    	; 0xa2e <show_data+0x13c>
     924:	68 c0       	rjmp	.+208    	; 0x9f6 <show_data+0x104>
        case 1:
            
            LCD_String_xy(1, 0, "  TEMPERATURE", 13);
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	60 e0       	ldi	r22, 0x00	; 0
     92a:	41 e7       	ldi	r20, 0x71	; 113
     92c:	50 e0       	ldi	r21, 0x00	; 0
     92e:	2d e0       	ldi	r18, 0x0D	; 13
     930:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_String_xy>
            LCD_String_xy(2, 0, "Now:", 4);
     934:	82 e0       	ldi	r24, 0x02	; 2
     936:	60 e0       	ldi	r22, 0x00	; 0
     938:	4f e7       	ldi	r20, 0x7F	; 127
     93a:	50 e0       	ldi	r21, 0x00	; 0
     93c:	24 e0       	ldi	r18, 0x04	; 4
     93e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_String_xy>
            LCD_String_xy(2, 9, "Set:", 4);
     942:	82 e0       	ldi	r24, 0x02	; 2
     944:	69 e0       	ldi	r22, 0x09	; 9
     946:	44 e8       	ldi	r20, 0x84	; 132
     948:	50 e0       	ldi	r21, 0x00	; 0
     94a:	24 e0       	ldi	r18, 0x04	; 4
     94c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_String_xy>
            itoa(set_temp, set_val_temp, 10);
     950:	80 91 d3 00 	lds	r24, 0x00D3
     954:	90 91 d4 00 	lds	r25, 0x00D4
     958:	8e 01       	movw	r16, r28
     95a:	0f 5f       	subi	r16, 0xFF	; 255
     95c:	1f 4f       	sbci	r17, 0xFF	; 255
     95e:	39 c0       	rjmp	.+114    	; 0x9d2 <show_data+0xe0>
			}
            break;
			
        case 2:
            
            LCD_String_xy(1, 0, "  AIR HUMIDITY ", 15);
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	49 e8       	ldi	r20, 0x89	; 137
     966:	50 e0       	ldi	r21, 0x00	; 0
     968:	2f e0       	ldi	r18, 0x0F	; 15
     96a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_String_xy>
            LCD_String_xy(2, 0, "Now:", 4);
     96e:	82 e0       	ldi	r24, 0x02	; 2
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	4f e7       	ldi	r20, 0x7F	; 127
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	24 e0       	ldi	r18, 0x04	; 4
     978:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_String_xy>
            LCD_String_xy(2, 9, "Set:", 4);
     97c:	82 e0       	ldi	r24, 0x02	; 2
     97e:	69 e0       	ldi	r22, 0x09	; 9
     980:	44 e8       	ldi	r20, 0x84	; 132
     982:	50 e0       	ldi	r21, 0x00	; 0
     984:	24 e0       	ldi	r18, 0x04	; 4
     986:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_String_xy>
            itoa(set_humi, set_val_hum, 10);
     98a:	80 91 d5 00 	lds	r24, 0x00D5
     98e:	90 91 d6 00 	lds	r25, 0x00D6
     992:	8e 01       	movw	r16, r28
     994:	0e 5f       	subi	r16, 0xFE	; 254
     996:	1f 4f       	sbci	r17, 0xFF	; 255
     998:	1c c0       	rjmp	.+56     	; 0x9d2 <show_data+0xe0>
			}
			break;
			
        case 3:
            
            LCD_String_xy(1, 0, " SOIL  MOISTURE", 15);
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	60 e0       	ldi	r22, 0x00	; 0
     99e:	49 e9       	ldi	r20, 0x99	; 153
     9a0:	50 e0       	ldi	r21, 0x00	; 0
     9a2:	2f e0       	ldi	r18, 0x0F	; 15
     9a4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_String_xy>
            LCD_String_xy(2, 0, "Now:", 4);
     9a8:	82 e0       	ldi	r24, 0x02	; 2
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	4f e7       	ldi	r20, 0x7F	; 127
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	24 e0       	ldi	r18, 0x04	; 4
     9b2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_String_xy>
            LCD_String_xy(2, 9, "Set:", 4);
     9b6:	82 e0       	ldi	r24, 0x02	; 2
     9b8:	69 e0       	ldi	r22, 0x09	; 9
     9ba:	44 e8       	ldi	r20, 0x84	; 132
     9bc:	50 e0       	ldi	r21, 0x00	; 0
     9be:	24 e0       	ldi	r18, 0x04	; 4
     9c0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_String_xy>
            itoa(set_soil, set_val_soil, 10);
     9c4:	80 91 d7 00 	lds	r24, 0x00D7
     9c8:	90 91 d8 00 	lds	r25, 0x00D8
     9cc:	8e 01       	movw	r16, r28
     9ce:	0d 5f       	subi	r16, 0xFD	; 253
     9d0:	1f 4f       	sbci	r17, 0xFF	; 255
     9d2:	b8 01       	movw	r22, r16
     9d4:	4a e0       	ldi	r20, 0x0A	; 10
     9d6:	50 e0       	ldi	r21, 0x00	; 0
     9d8:	0e 94 ee 07 	call	0xfdc	; 0xfdc <itoa>
            if(edit_btn == 0){
     9dc:	80 91 e3 00 	lds	r24, 0x00E3
     9e0:	88 23       	and	r24, r24
     9e2:	29 f5       	brne	.+74     	; 0xa2e <show_data+0x13c>
				LCD_String_xy(2, 13, set_val_soil, 3);
     9e4:	82 e0       	ldi	r24, 0x02	; 2
     9e6:	6d e0       	ldi	r22, 0x0D	; 13
     9e8:	a8 01       	movw	r20, r16
     9ea:	1e c0       	rjmp	.+60     	; 0xa28 <show_data+0x136>
			}
            break;
			
        case 4:
            LCD_String_xy(1, 0, "LIGHT INTENSITY", 15);
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	49 ea       	ldi	r20, 0xA9	; 169
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	04 c0       	rjmp	.+8      	; 0x9fe <show_data+0x10c>
            LCD_String_xy(2, 9, "Set:", 4);
            LCD_String_xy(2, 13, "NO ", 3);
            break;
			
        case 5:
            LCD_String_xy(1, 0, "  CO GAS LEVEL ", 15);
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	60 e0       	ldi	r22, 0x00	; 0
     9fa:	4d eb       	ldi	r20, 0xBD	; 189
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2f e0       	ldi	r18, 0x0F	; 15
     a00:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_String_xy>
            LCD_String_xy(2, 0, "Now:", 4);
     a04:	82 e0       	ldi	r24, 0x02	; 2
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	4f e7       	ldi	r20, 0x7F	; 127
     a0a:	50 e0       	ldi	r21, 0x00	; 0
     a0c:	24 e0       	ldi	r18, 0x04	; 4
     a0e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_String_xy>
            LCD_String_xy(2, 9, "Set:", 4);
     a12:	82 e0       	ldi	r24, 0x02	; 2
     a14:	69 e0       	ldi	r22, 0x09	; 9
     a16:	44 e8       	ldi	r20, 0x84	; 132
     a18:	50 e0       	ldi	r21, 0x00	; 0
     a1a:	24 e0       	ldi	r18, 0x04	; 4
     a1c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_String_xy>
            LCD_String_xy(2, 13, "NO ", 3);
     a20:	82 e0       	ldi	r24, 0x02	; 2
     a22:	6d e0       	ldi	r22, 0x0D	; 13
     a24:	49 eb       	ldi	r20, 0xB9	; 185
     a26:	50 e0       	ldi	r21, 0x00	; 0
     a28:	23 e0       	ldi	r18, 0x03	; 3
     a2a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_String_xy>
			
        default:
            // Handle any other cases or errors if necessary
            break;
    }
}
     a2e:	0f 90       	pop	r0
     a30:	0f 90       	pop	r0
     a32:	0f 90       	pop	r0
     a34:	cf 91       	pop	r28
     a36:	df 91       	pop	r29
     a38:	1f 91       	pop	r17
     a3a:	0f 91       	pop	r16
     a3c:	08 95       	ret

00000a3e <rotary>:


////////////////////////////////////////////////////////////////////////////////////////////////////////////

//int rotary(a_last_state,a_state,b_state,counter)
int rotary(){
     a3e:	0f 93       	push	r16
     a40:	1f 93       	push	r17
     a42:	df 93       	push	r29
     a44:	cf 93       	push	r28
     a46:	0f 92       	push	r0
     a48:	cd b7       	in	r28, 0x3d	; 61
     a4a:	de b7       	in	r29, 0x3e	; 62

	if(edit_btn == 1){
     a4c:	90 91 e3 00 	lds	r25, 0x00E3
     a50:	91 30       	cpi	r25, 0x01	; 1
     a52:	09 f0       	breq	.+2      	; 0xa56 <rotary+0x18>
     a54:	50 c0       	rjmp	.+160    	; 0xaf6 <rotary+0xb8>
     a56:	4a c0       	rjmp	.+148    	; 0xaec <rotary+0xae>
				
			char count[1];
				
			while (set_btn != 1){
				//read the updated value of a_state
				if (PINB & (1 << PINB0)){
     a58:	b0 9b       	sbis	0x16, 0	; 22
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <rotary+0x24>
					a_state= 0;
     a5c:	10 92 00 01 	sts	0x0100, r1
     a60:	02 c0       	rjmp	.+4      	; 0xa66 <rotary+0x28>
				} 
				else {
					a_state= 1;
     a62:	90 93 00 01 	sts	0x0100, r25
				}
				
				if (a_state != a_last_state){
     a66:	90 91 00 01 	lds	r25, 0x0100
     a6a:	80 91 0d 01 	lds	r24, 0x010D
     a6e:	98 17       	cp	r25, r24
     a70:	99 f1       	breq	.+102    	; 0xad8 <rotary+0x9a>
					
					// read the status of the b pin	
					if (PINB & (1 << PINB1)){
     a72:	b1 9b       	sbis	0x16, 1	; 22
     a74:	03 c0       	rjmp	.+6      	; 0xa7c <rotary+0x3e>
						b_state = 0;
     a76:	10 92 f7 00 	sts	0x00F7, r1
     a7a:	03 c0       	rjmp	.+6      	; 0xa82 <rotary+0x44>
					}	
					else {
						b_state = 1;
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	80 93 f7 00 	sts	0x00F7, r24
					}
					
					//check the rotate is clockwise or c_clockwise
					
					if (a_state != b_state){
     a82:	90 91 00 01 	lds	r25, 0x0100
     a86:	80 91 f7 00 	lds	r24, 0x00F7
     a8a:	98 17       	cp	r25, r24
     a8c:	31 f0       	breq	.+12     	; 0xa9a <rotary+0x5c>
					
						counter = counter +1 ;
     a8e:	80 91 e4 00 	lds	r24, 0x00E4
     a92:	90 91 e5 00 	lds	r25, 0x00E5
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <rotary+0x66>
					}
					
					else {
						
						counter = counter -1 ;
     a9a:	80 91 e4 00 	lds	r24, 0x00E4
     a9e:	90 91 e5 00 	lds	r25, 0x00E5
     aa2:	01 97       	sbiw	r24, 0x01	; 1
     aa4:	90 93 e5 00 	sts	0x00E5, r25
     aa8:	80 93 e4 00 	sts	0x00E4, r24
					}
					
						
					if (edit_btn == 1){
     aac:	80 91 e3 00 	lds	r24, 0x00E3
     ab0:	81 30       	cpi	r24, 0x01	; 1
     ab2:	91 f4       	brne	.+36     	; 0xad8 <rotary+0x9a>
						itoa(counter,count,10);
     ab4:	80 91 e4 00 	lds	r24, 0x00E4
     ab8:	90 91 e5 00 	lds	r25, 0x00E5
     abc:	8e 01       	movw	r16, r28
     abe:	0f 5f       	subi	r16, 0xFF	; 255
     ac0:	1f 4f       	sbci	r17, 0xFF	; 255
     ac2:	b8 01       	movw	r22, r16
     ac4:	4a e0       	ldi	r20, 0x0A	; 10
     ac6:	50 e0       	ldi	r21, 0x00	; 0
     ac8:	0e 94 ee 07 	call	0xfdc	; 0xfdc <itoa>
						LCD_String_xy (2,13,count,3); //data
     acc:	82 e0       	ldi	r24, 0x02	; 2
     ace:	6d e0       	ldi	r22, 0x0D	; 13
     ad0:	a8 01       	movw	r20, r16
     ad2:	23 e0       	ldi	r18, 0x03	; 3
     ad4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_String_xy>
					}
					
					
				}
				
			a_last_state = a_state;
     ad8:	80 91 00 01 	lds	r24, 0x0100
     adc:	80 93 0d 01 	sts	0x010D, r24
			return counter;
     ae0:	20 91 e4 00 	lds	r18, 0x00E4
     ae4:	30 91 e5 00 	lds	r19, 0x00E5
		
		
		
		
	}return;
}
     ae8:	c9 01       	movw	r24, r18
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <rotary+0xb8>
			}
				
				
			char count[1];
				
			while (set_btn != 1){
     aec:	80 91 d2 00 	lds	r24, 0x00D2
     af0:	81 30       	cpi	r24, 0x01	; 1
     af2:	09 f0       	breq	.+2      	; 0xaf6 <rotary+0xb8>
     af4:	b1 cf       	rjmp	.-158    	; 0xa58 <rotary+0x1a>
		
		
		
		
	}return;
}
     af6:	0f 90       	pop	r0
     af8:	cf 91       	pop	r28
     afa:	df 91       	pop	r29
     afc:	1f 91       	pop	r17
     afe:	0f 91       	pop	r16
     b00:	08 95       	ret

00000b02 <main>:



int main(void){
	
	ext_Interrupt();
     b02:	0e 94 c6 00 	call	0x18c	; 0x18c <ext_Interrupt>
	sei();
     b06:	78 94       	sei
	UART_init(9600);  // Baud Rate of Serial Communication
     b08:	60 e8       	ldi	r22, 0x80	; 128
     b0a:	75 e2       	ldi	r23, 0x25	; 37
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_init>
	port_init();
     b14:	0e 94 e5 01 	call	0x3ca	; 0x3ca <port_init>
	LCD_Init();			/* Initialize LCD */
     b18:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_Init>

//////  ADc register initialization //////////////

void ADC_Init(){
	
	ADCSRA = 0x87;		//  Enable ADC, fr/128  
     b1c:	87 e8       	ldi	r24, 0x87	; 135
     b1e:	86 b9       	out	0x06, r24	; 6
	sei();
	UART_init(9600);  // Baud Rate of Serial Communication
	port_init();
	LCD_Init();			/* Initialize LCD */
	ADC_Init();
	LCD_Clear();
     b20:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_Clear>
	
	
		
	while (1){	
		
		show_data(shift_btn,counter);
     b24:	80 91 e2 00 	lds	r24, 0x00E2
     b28:	60 91 e4 00 	lds	r22, 0x00E4
     b2c:	70 91 e5 00 	lds	r23, 0x00E5
     b30:	0e 94 79 04 	call	0x8f2	; 0x8f2 <show_data>
		if(edit_btn == 0){
     b34:	80 91 e3 00 	lds	r24, 0x00E3
     b38:	88 23       	and	r24, r24
     b3a:	a9 f4       	brne	.+42     	; 0xb66 <main+0x64>
			if(shift_btn == 2){
     b3c:	80 91 e2 00 	lds	r24, 0x00E2
     b40:	82 30       	cpi	r24, 0x02	; 2
     b42:	31 f4       	brne	.+12     	; 0xb50 <main+0x4e>
			LCD_String_xy (2,4,"56.8",4);
     b44:	64 e0       	ldi	r22, 0x04	; 4
     b46:	4d ec       	ldi	r20, 0xCD	; 205
     b48:	50 e0       	ldi	r21, 0x00	; 0
     b4a:	24 e0       	ldi	r18, 0x04	; 4
     b4c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_String_xy>
			}
			
			soil_moisture();
     b50:	0e 94 9b 03 	call	0x736	; 0x736 <soil_moisture>
			light_intensity();
     b54:	0e 94 3d 03 	call	0x67a	; 0x67a <light_intensity>
			cogas_level();
     b58:	0e 94 df 02 	call	0x5be	; 0x5be <cogas_level>
			machine();	
     b5c:	0e 94 0a 01 	call	0x214	; 0x214 <machine>
			UART_sendData();
     b60:	0e 94 25 04 	call	0x84a	; 0x84a <UART_sendData>
     b64:	df cf       	rjmp	.-66     	; 0xb24 <main+0x22>
			
			
		}else{
			rotary();
     b66:	0e 94 1f 05 	call	0xa3e	; 0xa3e <rotary>
     b6a:	dc cf       	rjmp	.-72     	; 0xb24 <main+0x22>

00000b6c <__subsf3>:
     b6c:	50 58       	subi	r21, 0x80	; 128

00000b6e <__addsf3>:
     b6e:	bb 27       	eor	r27, r27
     b70:	aa 27       	eor	r26, r26
     b72:	0e d0       	rcall	.+28     	; 0xb90 <__addsf3x>
     b74:	44 c1       	rjmp	.+648    	; 0xdfe <__fp_round>
     b76:	35 d1       	rcall	.+618    	; 0xde2 <__fp_pscA>
     b78:	30 f0       	brcs	.+12     	; 0xb86 <__addsf3+0x18>
     b7a:	3a d1       	rcall	.+628    	; 0xdf0 <__fp_pscB>
     b7c:	20 f0       	brcs	.+8      	; 0xb86 <__addsf3+0x18>
     b7e:	31 f4       	brne	.+12     	; 0xb8c <__addsf3+0x1e>
     b80:	9f 3f       	cpi	r25, 0xFF	; 255
     b82:	11 f4       	brne	.+4      	; 0xb88 <__addsf3+0x1a>
     b84:	1e f4       	brtc	.+6      	; 0xb8c <__addsf3+0x1e>
     b86:	2a c1       	rjmp	.+596    	; 0xddc <__fp_nan>
     b88:	0e f4       	brtc	.+2      	; 0xb8c <__addsf3+0x1e>
     b8a:	e0 95       	com	r30
     b8c:	e7 fb       	bst	r30, 7
     b8e:	20 c1       	rjmp	.+576    	; 0xdd0 <__fp_inf>

00000b90 <__addsf3x>:
     b90:	e9 2f       	mov	r30, r25
     b92:	46 d1       	rcall	.+652    	; 0xe20 <__fp_split3>
     b94:	80 f3       	brcs	.-32     	; 0xb76 <__addsf3+0x8>
     b96:	ba 17       	cp	r27, r26
     b98:	62 07       	cpc	r22, r18
     b9a:	73 07       	cpc	r23, r19
     b9c:	84 07       	cpc	r24, r20
     b9e:	95 07       	cpc	r25, r21
     ba0:	18 f0       	brcs	.+6      	; 0xba8 <__addsf3x+0x18>
     ba2:	71 f4       	brne	.+28     	; 0xbc0 <__addsf3x+0x30>
     ba4:	9e f5       	brtc	.+102    	; 0xc0c <__addsf3x+0x7c>
     ba6:	5e c1       	rjmp	.+700    	; 0xe64 <__fp_zero>
     ba8:	0e f4       	brtc	.+2      	; 0xbac <__addsf3x+0x1c>
     baa:	e0 95       	com	r30
     bac:	0b 2e       	mov	r0, r27
     bae:	ba 2f       	mov	r27, r26
     bb0:	a0 2d       	mov	r26, r0
     bb2:	0b 01       	movw	r0, r22
     bb4:	b9 01       	movw	r22, r18
     bb6:	90 01       	movw	r18, r0
     bb8:	0c 01       	movw	r0, r24
     bba:	ca 01       	movw	r24, r20
     bbc:	a0 01       	movw	r20, r0
     bbe:	11 24       	eor	r1, r1
     bc0:	ff 27       	eor	r31, r31
     bc2:	59 1b       	sub	r21, r25
     bc4:	99 f0       	breq	.+38     	; 0xbec <__addsf3x+0x5c>
     bc6:	59 3f       	cpi	r21, 0xF9	; 249
     bc8:	50 f4       	brcc	.+20     	; 0xbde <__addsf3x+0x4e>
     bca:	50 3e       	cpi	r21, 0xE0	; 224
     bcc:	68 f1       	brcs	.+90     	; 0xc28 <__addsf3x+0x98>
     bce:	1a 16       	cp	r1, r26
     bd0:	f0 40       	sbci	r31, 0x00	; 0
     bd2:	a2 2f       	mov	r26, r18
     bd4:	23 2f       	mov	r18, r19
     bd6:	34 2f       	mov	r19, r20
     bd8:	44 27       	eor	r20, r20
     bda:	58 5f       	subi	r21, 0xF8	; 248
     bdc:	f3 cf       	rjmp	.-26     	; 0xbc4 <__addsf3x+0x34>
     bde:	46 95       	lsr	r20
     be0:	37 95       	ror	r19
     be2:	27 95       	ror	r18
     be4:	a7 95       	ror	r26
     be6:	f0 40       	sbci	r31, 0x00	; 0
     be8:	53 95       	inc	r21
     bea:	c9 f7       	brne	.-14     	; 0xbde <__addsf3x+0x4e>
     bec:	7e f4       	brtc	.+30     	; 0xc0c <__addsf3x+0x7c>
     bee:	1f 16       	cp	r1, r31
     bf0:	ba 0b       	sbc	r27, r26
     bf2:	62 0b       	sbc	r22, r18
     bf4:	73 0b       	sbc	r23, r19
     bf6:	84 0b       	sbc	r24, r20
     bf8:	ba f0       	brmi	.+46     	; 0xc28 <__addsf3x+0x98>
     bfa:	91 50       	subi	r25, 0x01	; 1
     bfc:	a1 f0       	breq	.+40     	; 0xc26 <__addsf3x+0x96>
     bfe:	ff 0f       	add	r31, r31
     c00:	bb 1f       	adc	r27, r27
     c02:	66 1f       	adc	r22, r22
     c04:	77 1f       	adc	r23, r23
     c06:	88 1f       	adc	r24, r24
     c08:	c2 f7       	brpl	.-16     	; 0xbfa <__addsf3x+0x6a>
     c0a:	0e c0       	rjmp	.+28     	; 0xc28 <__addsf3x+0x98>
     c0c:	ba 0f       	add	r27, r26
     c0e:	62 1f       	adc	r22, r18
     c10:	73 1f       	adc	r23, r19
     c12:	84 1f       	adc	r24, r20
     c14:	48 f4       	brcc	.+18     	; 0xc28 <__addsf3x+0x98>
     c16:	87 95       	ror	r24
     c18:	77 95       	ror	r23
     c1a:	67 95       	ror	r22
     c1c:	b7 95       	ror	r27
     c1e:	f7 95       	ror	r31
     c20:	9e 3f       	cpi	r25, 0xFE	; 254
     c22:	08 f0       	brcs	.+2      	; 0xc26 <__addsf3x+0x96>
     c24:	b3 cf       	rjmp	.-154    	; 0xb8c <__addsf3+0x1e>
     c26:	93 95       	inc	r25
     c28:	88 0f       	add	r24, r24
     c2a:	08 f0       	brcs	.+2      	; 0xc2e <__addsf3x+0x9e>
     c2c:	99 27       	eor	r25, r25
     c2e:	ee 0f       	add	r30, r30
     c30:	97 95       	ror	r25
     c32:	87 95       	ror	r24
     c34:	08 95       	ret

00000c36 <__cmpsf2>:
     c36:	a8 d0       	rcall	.+336    	; 0xd88 <__fp_cmp>
     c38:	08 f4       	brcc	.+2      	; 0xc3c <__cmpsf2+0x6>
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	08 95       	ret

00000c3e <__divsf3>:
     c3e:	0c d0       	rcall	.+24     	; 0xc58 <__divsf3x>
     c40:	de c0       	rjmp	.+444    	; 0xdfe <__fp_round>
     c42:	d6 d0       	rcall	.+428    	; 0xdf0 <__fp_pscB>
     c44:	40 f0       	brcs	.+16     	; 0xc56 <__divsf3+0x18>
     c46:	cd d0       	rcall	.+410    	; 0xde2 <__fp_pscA>
     c48:	30 f0       	brcs	.+12     	; 0xc56 <__divsf3+0x18>
     c4a:	21 f4       	brne	.+8      	; 0xc54 <__divsf3+0x16>
     c4c:	5f 3f       	cpi	r21, 0xFF	; 255
     c4e:	19 f0       	breq	.+6      	; 0xc56 <__divsf3+0x18>
     c50:	bf c0       	rjmp	.+382    	; 0xdd0 <__fp_inf>
     c52:	51 11       	cpse	r21, r1
     c54:	08 c1       	rjmp	.+528    	; 0xe66 <__fp_szero>
     c56:	c2 c0       	rjmp	.+388    	; 0xddc <__fp_nan>

00000c58 <__divsf3x>:
     c58:	e3 d0       	rcall	.+454    	; 0xe20 <__fp_split3>
     c5a:	98 f3       	brcs	.-26     	; 0xc42 <__divsf3+0x4>

00000c5c <__divsf3_pse>:
     c5c:	99 23       	and	r25, r25
     c5e:	c9 f3       	breq	.-14     	; 0xc52 <__divsf3+0x14>
     c60:	55 23       	and	r21, r21
     c62:	b1 f3       	breq	.-20     	; 0xc50 <__divsf3+0x12>
     c64:	95 1b       	sub	r25, r21
     c66:	55 0b       	sbc	r21, r21
     c68:	bb 27       	eor	r27, r27
     c6a:	aa 27       	eor	r26, r26
     c6c:	62 17       	cp	r22, r18
     c6e:	73 07       	cpc	r23, r19
     c70:	84 07       	cpc	r24, r20
     c72:	38 f0       	brcs	.+14     	; 0xc82 <__divsf3_pse+0x26>
     c74:	9f 5f       	subi	r25, 0xFF	; 255
     c76:	5f 4f       	sbci	r21, 0xFF	; 255
     c78:	22 0f       	add	r18, r18
     c7a:	33 1f       	adc	r19, r19
     c7c:	44 1f       	adc	r20, r20
     c7e:	aa 1f       	adc	r26, r26
     c80:	a9 f3       	breq	.-22     	; 0xc6c <__divsf3_pse+0x10>
     c82:	33 d0       	rcall	.+102    	; 0xcea <__divsf3_pse+0x8e>
     c84:	0e 2e       	mov	r0, r30
     c86:	3a f0       	brmi	.+14     	; 0xc96 <__divsf3_pse+0x3a>
     c88:	e0 e8       	ldi	r30, 0x80	; 128
     c8a:	30 d0       	rcall	.+96     	; 0xcec <__divsf3_pse+0x90>
     c8c:	91 50       	subi	r25, 0x01	; 1
     c8e:	50 40       	sbci	r21, 0x00	; 0
     c90:	e6 95       	lsr	r30
     c92:	00 1c       	adc	r0, r0
     c94:	ca f7       	brpl	.-14     	; 0xc88 <__divsf3_pse+0x2c>
     c96:	29 d0       	rcall	.+82     	; 0xcea <__divsf3_pse+0x8e>
     c98:	fe 2f       	mov	r31, r30
     c9a:	27 d0       	rcall	.+78     	; 0xcea <__divsf3_pse+0x8e>
     c9c:	66 0f       	add	r22, r22
     c9e:	77 1f       	adc	r23, r23
     ca0:	88 1f       	adc	r24, r24
     ca2:	bb 1f       	adc	r27, r27
     ca4:	26 17       	cp	r18, r22
     ca6:	37 07       	cpc	r19, r23
     ca8:	48 07       	cpc	r20, r24
     caa:	ab 07       	cpc	r26, r27
     cac:	b0 e8       	ldi	r27, 0x80	; 128
     cae:	09 f0       	breq	.+2      	; 0xcb2 <__divsf3_pse+0x56>
     cb0:	bb 0b       	sbc	r27, r27
     cb2:	80 2d       	mov	r24, r0
     cb4:	bf 01       	movw	r22, r30
     cb6:	ff 27       	eor	r31, r31
     cb8:	93 58       	subi	r25, 0x83	; 131
     cba:	5f 4f       	sbci	r21, 0xFF	; 255
     cbc:	2a f0       	brmi	.+10     	; 0xcc8 <__divsf3_pse+0x6c>
     cbe:	9e 3f       	cpi	r25, 0xFE	; 254
     cc0:	51 05       	cpc	r21, r1
     cc2:	68 f0       	brcs	.+26     	; 0xcde <__divsf3_pse+0x82>
     cc4:	85 c0       	rjmp	.+266    	; 0xdd0 <__fp_inf>
     cc6:	cf c0       	rjmp	.+414    	; 0xe66 <__fp_szero>
     cc8:	5f 3f       	cpi	r21, 0xFF	; 255
     cca:	ec f3       	brlt	.-6      	; 0xcc6 <__divsf3_pse+0x6a>
     ccc:	98 3e       	cpi	r25, 0xE8	; 232
     cce:	dc f3       	brlt	.-10     	; 0xcc6 <__divsf3_pse+0x6a>
     cd0:	86 95       	lsr	r24
     cd2:	77 95       	ror	r23
     cd4:	67 95       	ror	r22
     cd6:	b7 95       	ror	r27
     cd8:	f7 95       	ror	r31
     cda:	9f 5f       	subi	r25, 0xFF	; 255
     cdc:	c9 f7       	brne	.-14     	; 0xcd0 <__divsf3_pse+0x74>
     cde:	88 0f       	add	r24, r24
     ce0:	91 1d       	adc	r25, r1
     ce2:	96 95       	lsr	r25
     ce4:	87 95       	ror	r24
     ce6:	97 f9       	bld	r25, 7
     ce8:	08 95       	ret
     cea:	e1 e0       	ldi	r30, 0x01	; 1
     cec:	66 0f       	add	r22, r22
     cee:	77 1f       	adc	r23, r23
     cf0:	88 1f       	adc	r24, r24
     cf2:	bb 1f       	adc	r27, r27
     cf4:	62 17       	cp	r22, r18
     cf6:	73 07       	cpc	r23, r19
     cf8:	84 07       	cpc	r24, r20
     cfa:	ba 07       	cpc	r27, r26
     cfc:	20 f0       	brcs	.+8      	; 0xd06 <__divsf3_pse+0xaa>
     cfe:	62 1b       	sub	r22, r18
     d00:	73 0b       	sbc	r23, r19
     d02:	84 0b       	sbc	r24, r20
     d04:	ba 0b       	sbc	r27, r26
     d06:	ee 1f       	adc	r30, r30
     d08:	88 f7       	brcc	.-30     	; 0xcec <__divsf3_pse+0x90>
     d0a:	e0 95       	com	r30
     d0c:	08 95       	ret

00000d0e <__floatunsisf>:
     d0e:	e8 94       	clt
     d10:	09 c0       	rjmp	.+18     	; 0xd24 <__floatsisf+0x12>

00000d12 <__floatsisf>:
     d12:	97 fb       	bst	r25, 7
     d14:	3e f4       	brtc	.+14     	; 0xd24 <__floatsisf+0x12>
     d16:	90 95       	com	r25
     d18:	80 95       	com	r24
     d1a:	70 95       	com	r23
     d1c:	61 95       	neg	r22
     d1e:	7f 4f       	sbci	r23, 0xFF	; 255
     d20:	8f 4f       	sbci	r24, 0xFF	; 255
     d22:	9f 4f       	sbci	r25, 0xFF	; 255
     d24:	99 23       	and	r25, r25
     d26:	a9 f0       	breq	.+42     	; 0xd52 <__floatsisf+0x40>
     d28:	f9 2f       	mov	r31, r25
     d2a:	96 e9       	ldi	r25, 0x96	; 150
     d2c:	bb 27       	eor	r27, r27
     d2e:	93 95       	inc	r25
     d30:	f6 95       	lsr	r31
     d32:	87 95       	ror	r24
     d34:	77 95       	ror	r23
     d36:	67 95       	ror	r22
     d38:	b7 95       	ror	r27
     d3a:	f1 11       	cpse	r31, r1
     d3c:	f8 cf       	rjmp	.-16     	; 0xd2e <__floatsisf+0x1c>
     d3e:	fa f4       	brpl	.+62     	; 0xd7e <__floatsisf+0x6c>
     d40:	bb 0f       	add	r27, r27
     d42:	11 f4       	brne	.+4      	; 0xd48 <__floatsisf+0x36>
     d44:	60 ff       	sbrs	r22, 0
     d46:	1b c0       	rjmp	.+54     	; 0xd7e <__floatsisf+0x6c>
     d48:	6f 5f       	subi	r22, 0xFF	; 255
     d4a:	7f 4f       	sbci	r23, 0xFF	; 255
     d4c:	8f 4f       	sbci	r24, 0xFF	; 255
     d4e:	9f 4f       	sbci	r25, 0xFF	; 255
     d50:	16 c0       	rjmp	.+44     	; 0xd7e <__floatsisf+0x6c>
     d52:	88 23       	and	r24, r24
     d54:	11 f0       	breq	.+4      	; 0xd5a <__floatsisf+0x48>
     d56:	96 e9       	ldi	r25, 0x96	; 150
     d58:	11 c0       	rjmp	.+34     	; 0xd7c <__floatsisf+0x6a>
     d5a:	77 23       	and	r23, r23
     d5c:	21 f0       	breq	.+8      	; 0xd66 <__floatsisf+0x54>
     d5e:	9e e8       	ldi	r25, 0x8E	; 142
     d60:	87 2f       	mov	r24, r23
     d62:	76 2f       	mov	r23, r22
     d64:	05 c0       	rjmp	.+10     	; 0xd70 <__floatsisf+0x5e>
     d66:	66 23       	and	r22, r22
     d68:	71 f0       	breq	.+28     	; 0xd86 <__floatsisf+0x74>
     d6a:	96 e8       	ldi	r25, 0x86	; 134
     d6c:	86 2f       	mov	r24, r22
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	2a f0       	brmi	.+10     	; 0xd7e <__floatsisf+0x6c>
     d74:	9a 95       	dec	r25
     d76:	66 0f       	add	r22, r22
     d78:	77 1f       	adc	r23, r23
     d7a:	88 1f       	adc	r24, r24
     d7c:	da f7       	brpl	.-10     	; 0xd74 <__floatsisf+0x62>
     d7e:	88 0f       	add	r24, r24
     d80:	96 95       	lsr	r25
     d82:	87 95       	ror	r24
     d84:	97 f9       	bld	r25, 7
     d86:	08 95       	ret

00000d88 <__fp_cmp>:
     d88:	99 0f       	add	r25, r25
     d8a:	00 08       	sbc	r0, r0
     d8c:	55 0f       	add	r21, r21
     d8e:	aa 0b       	sbc	r26, r26
     d90:	e0 e8       	ldi	r30, 0x80	; 128
     d92:	fe ef       	ldi	r31, 0xFE	; 254
     d94:	16 16       	cp	r1, r22
     d96:	17 06       	cpc	r1, r23
     d98:	e8 07       	cpc	r30, r24
     d9a:	f9 07       	cpc	r31, r25
     d9c:	c0 f0       	brcs	.+48     	; 0xdce <__fp_cmp+0x46>
     d9e:	12 16       	cp	r1, r18
     da0:	13 06       	cpc	r1, r19
     da2:	e4 07       	cpc	r30, r20
     da4:	f5 07       	cpc	r31, r21
     da6:	98 f0       	brcs	.+38     	; 0xdce <__fp_cmp+0x46>
     da8:	62 1b       	sub	r22, r18
     daa:	73 0b       	sbc	r23, r19
     dac:	84 0b       	sbc	r24, r20
     dae:	95 0b       	sbc	r25, r21
     db0:	39 f4       	brne	.+14     	; 0xdc0 <__fp_cmp+0x38>
     db2:	0a 26       	eor	r0, r26
     db4:	61 f0       	breq	.+24     	; 0xdce <__fp_cmp+0x46>
     db6:	23 2b       	or	r18, r19
     db8:	24 2b       	or	r18, r20
     dba:	25 2b       	or	r18, r21
     dbc:	21 f4       	brne	.+8      	; 0xdc6 <__fp_cmp+0x3e>
     dbe:	08 95       	ret
     dc0:	0a 26       	eor	r0, r26
     dc2:	09 f4       	brne	.+2      	; 0xdc6 <__fp_cmp+0x3e>
     dc4:	a1 40       	sbci	r26, 0x01	; 1
     dc6:	a6 95       	lsr	r26
     dc8:	8f ef       	ldi	r24, 0xFF	; 255
     dca:	81 1d       	adc	r24, r1
     dcc:	81 1d       	adc	r24, r1
     dce:	08 95       	ret

00000dd0 <__fp_inf>:
     dd0:	97 f9       	bld	r25, 7
     dd2:	9f 67       	ori	r25, 0x7F	; 127
     dd4:	80 e8       	ldi	r24, 0x80	; 128
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	08 95       	ret

00000ddc <__fp_nan>:
     ddc:	9f ef       	ldi	r25, 0xFF	; 255
     dde:	80 ec       	ldi	r24, 0xC0	; 192
     de0:	08 95       	ret

00000de2 <__fp_pscA>:
     de2:	00 24       	eor	r0, r0
     de4:	0a 94       	dec	r0
     de6:	16 16       	cp	r1, r22
     de8:	17 06       	cpc	r1, r23
     dea:	18 06       	cpc	r1, r24
     dec:	09 06       	cpc	r0, r25
     dee:	08 95       	ret

00000df0 <__fp_pscB>:
     df0:	00 24       	eor	r0, r0
     df2:	0a 94       	dec	r0
     df4:	12 16       	cp	r1, r18
     df6:	13 06       	cpc	r1, r19
     df8:	14 06       	cpc	r1, r20
     dfa:	05 06       	cpc	r0, r21
     dfc:	08 95       	ret

00000dfe <__fp_round>:
     dfe:	09 2e       	mov	r0, r25
     e00:	03 94       	inc	r0
     e02:	00 0c       	add	r0, r0
     e04:	11 f4       	brne	.+4      	; 0xe0a <__fp_round+0xc>
     e06:	88 23       	and	r24, r24
     e08:	52 f0       	brmi	.+20     	; 0xe1e <__fp_round+0x20>
     e0a:	bb 0f       	add	r27, r27
     e0c:	40 f4       	brcc	.+16     	; 0xe1e <__fp_round+0x20>
     e0e:	bf 2b       	or	r27, r31
     e10:	11 f4       	brne	.+4      	; 0xe16 <__fp_round+0x18>
     e12:	60 ff       	sbrs	r22, 0
     e14:	04 c0       	rjmp	.+8      	; 0xe1e <__fp_round+0x20>
     e16:	6f 5f       	subi	r22, 0xFF	; 255
     e18:	7f 4f       	sbci	r23, 0xFF	; 255
     e1a:	8f 4f       	sbci	r24, 0xFF	; 255
     e1c:	9f 4f       	sbci	r25, 0xFF	; 255
     e1e:	08 95       	ret

00000e20 <__fp_split3>:
     e20:	57 fd       	sbrc	r21, 7
     e22:	90 58       	subi	r25, 0x80	; 128
     e24:	44 0f       	add	r20, r20
     e26:	55 1f       	adc	r21, r21
     e28:	59 f0       	breq	.+22     	; 0xe40 <__fp_splitA+0x10>
     e2a:	5f 3f       	cpi	r21, 0xFF	; 255
     e2c:	71 f0       	breq	.+28     	; 0xe4a <__fp_splitA+0x1a>
     e2e:	47 95       	ror	r20

00000e30 <__fp_splitA>:
     e30:	88 0f       	add	r24, r24
     e32:	97 fb       	bst	r25, 7
     e34:	99 1f       	adc	r25, r25
     e36:	61 f0       	breq	.+24     	; 0xe50 <__fp_splitA+0x20>
     e38:	9f 3f       	cpi	r25, 0xFF	; 255
     e3a:	79 f0       	breq	.+30     	; 0xe5a <__fp_splitA+0x2a>
     e3c:	87 95       	ror	r24
     e3e:	08 95       	ret
     e40:	12 16       	cp	r1, r18
     e42:	13 06       	cpc	r1, r19
     e44:	14 06       	cpc	r1, r20
     e46:	55 1f       	adc	r21, r21
     e48:	f2 cf       	rjmp	.-28     	; 0xe2e <__fp_split3+0xe>
     e4a:	46 95       	lsr	r20
     e4c:	f1 df       	rcall	.-30     	; 0xe30 <__fp_splitA>
     e4e:	08 c0       	rjmp	.+16     	; 0xe60 <__fp_splitA+0x30>
     e50:	16 16       	cp	r1, r22
     e52:	17 06       	cpc	r1, r23
     e54:	18 06       	cpc	r1, r24
     e56:	99 1f       	adc	r25, r25
     e58:	f1 cf       	rjmp	.-30     	; 0xe3c <__fp_splitA+0xc>
     e5a:	86 95       	lsr	r24
     e5c:	71 05       	cpc	r23, r1
     e5e:	61 05       	cpc	r22, r1
     e60:	08 94       	sec
     e62:	08 95       	ret

00000e64 <__fp_zero>:
     e64:	e8 94       	clt

00000e66 <__fp_szero>:
     e66:	bb 27       	eor	r27, r27
     e68:	66 27       	eor	r22, r22
     e6a:	77 27       	eor	r23, r23
     e6c:	cb 01       	movw	r24, r22
     e6e:	97 f9       	bld	r25, 7
     e70:	08 95       	ret

00000e72 <__gesf2>:
     e72:	8a df       	rcall	.-236    	; 0xd88 <__fp_cmp>
     e74:	08 f4       	brcc	.+2      	; 0xe78 <__gesf2+0x6>
     e76:	8f ef       	ldi	r24, 0xFF	; 255
     e78:	08 95       	ret

00000e7a <__mulsf3>:
     e7a:	0b d0       	rcall	.+22     	; 0xe92 <__mulsf3x>
     e7c:	c0 cf       	rjmp	.-128    	; 0xdfe <__fp_round>
     e7e:	b1 df       	rcall	.-158    	; 0xde2 <__fp_pscA>
     e80:	28 f0       	brcs	.+10     	; 0xe8c <__mulsf3+0x12>
     e82:	b6 df       	rcall	.-148    	; 0xdf0 <__fp_pscB>
     e84:	18 f0       	brcs	.+6      	; 0xe8c <__mulsf3+0x12>
     e86:	95 23       	and	r25, r21
     e88:	09 f0       	breq	.+2      	; 0xe8c <__mulsf3+0x12>
     e8a:	a2 cf       	rjmp	.-188    	; 0xdd0 <__fp_inf>
     e8c:	a7 cf       	rjmp	.-178    	; 0xddc <__fp_nan>
     e8e:	11 24       	eor	r1, r1
     e90:	ea cf       	rjmp	.-44     	; 0xe66 <__fp_szero>

00000e92 <__mulsf3x>:
     e92:	c6 df       	rcall	.-116    	; 0xe20 <__fp_split3>
     e94:	a0 f3       	brcs	.-24     	; 0xe7e <__mulsf3+0x4>

00000e96 <__mulsf3_pse>:
     e96:	95 9f       	mul	r25, r21
     e98:	d1 f3       	breq	.-12     	; 0xe8e <__mulsf3+0x14>
     e9a:	95 0f       	add	r25, r21
     e9c:	50 e0       	ldi	r21, 0x00	; 0
     e9e:	55 1f       	adc	r21, r21
     ea0:	62 9f       	mul	r22, r18
     ea2:	f0 01       	movw	r30, r0
     ea4:	72 9f       	mul	r23, r18
     ea6:	bb 27       	eor	r27, r27
     ea8:	f0 0d       	add	r31, r0
     eaa:	b1 1d       	adc	r27, r1
     eac:	63 9f       	mul	r22, r19
     eae:	aa 27       	eor	r26, r26
     eb0:	f0 0d       	add	r31, r0
     eb2:	b1 1d       	adc	r27, r1
     eb4:	aa 1f       	adc	r26, r26
     eb6:	64 9f       	mul	r22, r20
     eb8:	66 27       	eor	r22, r22
     eba:	b0 0d       	add	r27, r0
     ebc:	a1 1d       	adc	r26, r1
     ebe:	66 1f       	adc	r22, r22
     ec0:	82 9f       	mul	r24, r18
     ec2:	22 27       	eor	r18, r18
     ec4:	b0 0d       	add	r27, r0
     ec6:	a1 1d       	adc	r26, r1
     ec8:	62 1f       	adc	r22, r18
     eca:	73 9f       	mul	r23, r19
     ecc:	b0 0d       	add	r27, r0
     ece:	a1 1d       	adc	r26, r1
     ed0:	62 1f       	adc	r22, r18
     ed2:	83 9f       	mul	r24, r19
     ed4:	a0 0d       	add	r26, r0
     ed6:	61 1d       	adc	r22, r1
     ed8:	22 1f       	adc	r18, r18
     eda:	74 9f       	mul	r23, r20
     edc:	33 27       	eor	r19, r19
     ede:	a0 0d       	add	r26, r0
     ee0:	61 1d       	adc	r22, r1
     ee2:	23 1f       	adc	r18, r19
     ee4:	84 9f       	mul	r24, r20
     ee6:	60 0d       	add	r22, r0
     ee8:	21 1d       	adc	r18, r1
     eea:	82 2f       	mov	r24, r18
     eec:	76 2f       	mov	r23, r22
     eee:	6a 2f       	mov	r22, r26
     ef0:	11 24       	eor	r1, r1
     ef2:	9f 57       	subi	r25, 0x7F	; 127
     ef4:	50 40       	sbci	r21, 0x00	; 0
     ef6:	8a f0       	brmi	.+34     	; 0xf1a <__mulsf3_pse+0x84>
     ef8:	e1 f0       	breq	.+56     	; 0xf32 <__mulsf3_pse+0x9c>
     efa:	88 23       	and	r24, r24
     efc:	4a f0       	brmi	.+18     	; 0xf10 <__mulsf3_pse+0x7a>
     efe:	ee 0f       	add	r30, r30
     f00:	ff 1f       	adc	r31, r31
     f02:	bb 1f       	adc	r27, r27
     f04:	66 1f       	adc	r22, r22
     f06:	77 1f       	adc	r23, r23
     f08:	88 1f       	adc	r24, r24
     f0a:	91 50       	subi	r25, 0x01	; 1
     f0c:	50 40       	sbci	r21, 0x00	; 0
     f0e:	a9 f7       	brne	.-22     	; 0xefa <__mulsf3_pse+0x64>
     f10:	9e 3f       	cpi	r25, 0xFE	; 254
     f12:	51 05       	cpc	r21, r1
     f14:	70 f0       	brcs	.+28     	; 0xf32 <__mulsf3_pse+0x9c>
     f16:	5c cf       	rjmp	.-328    	; 0xdd0 <__fp_inf>
     f18:	a6 cf       	rjmp	.-180    	; 0xe66 <__fp_szero>
     f1a:	5f 3f       	cpi	r21, 0xFF	; 255
     f1c:	ec f3       	brlt	.-6      	; 0xf18 <__mulsf3_pse+0x82>
     f1e:	98 3e       	cpi	r25, 0xE8	; 232
     f20:	dc f3       	brlt	.-10     	; 0xf18 <__mulsf3_pse+0x82>
     f22:	86 95       	lsr	r24
     f24:	77 95       	ror	r23
     f26:	67 95       	ror	r22
     f28:	b7 95       	ror	r27
     f2a:	f7 95       	ror	r31
     f2c:	e7 95       	ror	r30
     f2e:	9f 5f       	subi	r25, 0xFF	; 255
     f30:	c1 f7       	brne	.-16     	; 0xf22 <__mulsf3_pse+0x8c>
     f32:	fe 2b       	or	r31, r30
     f34:	88 0f       	add	r24, r24
     f36:	91 1d       	adc	r25, r1
     f38:	96 95       	lsr	r25
     f3a:	87 95       	ror	r24
     f3c:	97 f9       	bld	r25, 7
     f3e:	08 95       	ret

00000f40 <__udivmodsi4>:
     f40:	a1 e2       	ldi	r26, 0x21	; 33
     f42:	1a 2e       	mov	r1, r26
     f44:	aa 1b       	sub	r26, r26
     f46:	bb 1b       	sub	r27, r27
     f48:	fd 01       	movw	r30, r26
     f4a:	0d c0       	rjmp	.+26     	; 0xf66 <__udivmodsi4_ep>

00000f4c <__udivmodsi4_loop>:
     f4c:	aa 1f       	adc	r26, r26
     f4e:	bb 1f       	adc	r27, r27
     f50:	ee 1f       	adc	r30, r30
     f52:	ff 1f       	adc	r31, r31
     f54:	a2 17       	cp	r26, r18
     f56:	b3 07       	cpc	r27, r19
     f58:	e4 07       	cpc	r30, r20
     f5a:	f5 07       	cpc	r31, r21
     f5c:	20 f0       	brcs	.+8      	; 0xf66 <__udivmodsi4_ep>
     f5e:	a2 1b       	sub	r26, r18
     f60:	b3 0b       	sbc	r27, r19
     f62:	e4 0b       	sbc	r30, r20
     f64:	f5 0b       	sbc	r31, r21

00000f66 <__udivmodsi4_ep>:
     f66:	66 1f       	adc	r22, r22
     f68:	77 1f       	adc	r23, r23
     f6a:	88 1f       	adc	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	1a 94       	dec	r1
     f70:	69 f7       	brne	.-38     	; 0xf4c <__udivmodsi4_loop>
     f72:	60 95       	com	r22
     f74:	70 95       	com	r23
     f76:	80 95       	com	r24
     f78:	90 95       	com	r25
     f7a:	9b 01       	movw	r18, r22
     f7c:	ac 01       	movw	r20, r24
     f7e:	bd 01       	movw	r22, r26
     f80:	cf 01       	movw	r24, r30
     f82:	08 95       	ret

00000f84 <dtostrf>:
     f84:	ef 92       	push	r14
     f86:	ff 92       	push	r15
     f88:	0f 93       	push	r16
     f8a:	1f 93       	push	r17
     f8c:	f2 2f       	mov	r31, r18
     f8e:	f0 2e       	mov	r15, r16
     f90:	47 fd       	sbrc	r20, 7
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <dtostrf+0x14>
     f94:	e4 e0       	ldi	r30, 0x04	; 4
     f96:	01 c0       	rjmp	.+2      	; 0xf9a <dtostrf+0x16>
     f98:	e4 e1       	ldi	r30, 0x14	; 20
     f9a:	24 2f       	mov	r18, r20
     f9c:	33 27       	eor	r19, r19
     f9e:	27 fd       	sbrc	r18, 7
     fa0:	30 95       	com	r19
     fa2:	37 ff       	sbrs	r19, 7
     fa4:	03 c0       	rjmp	.+6      	; 0xfac <dtostrf+0x28>
     fa6:	30 95       	com	r19
     fa8:	21 95       	neg	r18
     faa:	3f 4f       	sbci	r19, 0xFF	; 255
     fac:	4f 2d       	mov	r20, r15
     fae:	51 2f       	mov	r21, r17
     fb0:	0f 2f       	mov	r16, r31
     fb2:	ee 2e       	mov	r14, r30
     fb4:	0e 94 0f 08 	call	0x101e	; 0x101e <dtoa_prf>
     fb8:	8f 2d       	mov	r24, r15
     fba:	91 2f       	mov	r25, r17
     fbc:	1f 91       	pop	r17
     fbe:	0f 91       	pop	r16
     fc0:	ff 90       	pop	r15
     fc2:	ef 90       	pop	r14
     fc4:	08 95       	ret

00000fc6 <strcat>:
     fc6:	fb 01       	movw	r30, r22
     fc8:	dc 01       	movw	r26, r24
     fca:	0d 90       	ld	r0, X+
     fcc:	00 20       	and	r0, r0
     fce:	e9 f7       	brne	.-6      	; 0xfca <strcat+0x4>
     fd0:	11 97       	sbiw	r26, 0x01	; 1
     fd2:	01 90       	ld	r0, Z+
     fd4:	0d 92       	st	X+, r0
     fd6:	00 20       	and	r0, r0
     fd8:	e1 f7       	brne	.-8      	; 0xfd2 <strcat+0xc>
     fda:	08 95       	ret

00000fdc <itoa>:
     fdc:	fb 01       	movw	r30, r22
     fde:	9f 01       	movw	r18, r30
     fe0:	e8 94       	clt
     fe2:	42 30       	cpi	r20, 0x02	; 2
     fe4:	c4 f0       	brlt	.+48     	; 0x1016 <itoa+0x3a>
     fe6:	45 32       	cpi	r20, 0x25	; 37
     fe8:	b4 f4       	brge	.+44     	; 0x1016 <itoa+0x3a>
     fea:	4a 30       	cpi	r20, 0x0A	; 10
     fec:	29 f4       	brne	.+10     	; 0xff8 <itoa+0x1c>
     fee:	97 fb       	bst	r25, 7
     ff0:	1e f4       	brtc	.+6      	; 0xff8 <itoa+0x1c>
     ff2:	90 95       	com	r25
     ff4:	81 95       	neg	r24
     ff6:	9f 4f       	sbci	r25, 0xFF	; 255
     ff8:	64 2f       	mov	r22, r20
     ffa:	77 27       	eor	r23, r23
     ffc:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <__udivmodhi4>
    1000:	80 5d       	subi	r24, 0xD0	; 208
    1002:	8a 33       	cpi	r24, 0x3A	; 58
    1004:	0c f0       	brlt	.+2      	; 0x1008 <itoa+0x2c>
    1006:	89 5d       	subi	r24, 0xD9	; 217
    1008:	81 93       	st	Z+, r24
    100a:	cb 01       	movw	r24, r22
    100c:	00 97       	sbiw	r24, 0x00	; 0
    100e:	a1 f7       	brne	.-24     	; 0xff8 <itoa+0x1c>
    1010:	16 f4       	brtc	.+4      	; 0x1016 <itoa+0x3a>
    1012:	5d e2       	ldi	r21, 0x2D	; 45
    1014:	51 93       	st	Z+, r21
    1016:	10 82       	st	Z, r1
    1018:	c9 01       	movw	r24, r18
    101a:	0c 94 49 0a 	jmp	0x1492	; 0x1492 <strrev>

0000101e <dtoa_prf>:
    101e:	a9 e0       	ldi	r26, 0x09	; 9
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e5 e1       	ldi	r30, 0x15	; 21
    1024:	f8 e0       	ldi	r31, 0x08	; 8
    1026:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <__prologue_saves__+0x8>
    102a:	6a 01       	movw	r12, r20
    102c:	12 2f       	mov	r17, r18
    102e:	a0 2e       	mov	r10, r16
    1030:	be 2c       	mov	r11, r14
    1032:	2b e3       	ldi	r18, 0x3B	; 59
    1034:	20 17       	cp	r18, r16
    1036:	18 f4       	brcc	.+6      	; 0x103e <dtoa_prf+0x20>
    1038:	2c e3       	ldi	r18, 0x3C	; 60
    103a:	92 2e       	mov	r9, r18
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <dtoa_prf+0x24>
    103e:	90 2e       	mov	r9, r16
    1040:	93 94       	inc	r9
    1042:	ae 01       	movw	r20, r28
    1044:	4f 5f       	subi	r20, 0xFF	; 255
    1046:	5f 4f       	sbci	r21, 0xFF	; 255
    1048:	27 e0       	ldi	r18, 0x07	; 7
    104a:	09 2d       	mov	r16, r9
    104c:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__ftoa_engine>
    1050:	bc 01       	movw	r22, r24
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	e8 2e       	mov	r14, r24
    1056:	ff 24       	eor	r15, r15
    1058:	c7 01       	movw	r24, r14
    105a:	89 70       	andi	r24, 0x09	; 9
    105c:	90 70       	andi	r25, 0x00	; 0
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	11 f4       	brne	.+4      	; 0x1066 <dtoa_prf+0x48>
    1062:	ad e2       	ldi	r26, 0x2D	; 45
    1064:	09 c0       	rjmp	.+18     	; 0x1078 <dtoa_prf+0x5a>
    1066:	b1 fe       	sbrs	r11, 1
    1068:	02 c0       	rjmp	.+4      	; 0x106e <dtoa_prf+0x50>
    106a:	ab e2       	ldi	r26, 0x2B	; 43
    106c:	05 c0       	rjmp	.+10     	; 0x1078 <dtoa_prf+0x5a>
    106e:	b0 fc       	sbrc	r11, 0
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <dtoa_prf+0x58>
    1072:	a0 e0       	ldi	r26, 0x00	; 0
    1074:	01 c0       	rjmp	.+2      	; 0x1078 <dtoa_prf+0x5a>
    1076:	a0 e2       	ldi	r26, 0x20	; 32
    1078:	e3 fe       	sbrs	r14, 3
    107a:	3b c0       	rjmp	.+118    	; 0x10f2 <dtoa_prf+0xd4>
    107c:	aa 23       	and	r26, r26
    107e:	11 f4       	brne	.+4      	; 0x1084 <dtoa_prf+0x66>
    1080:	23 e0       	ldi	r18, 0x03	; 3
    1082:	01 c0       	rjmp	.+2      	; 0x1086 <dtoa_prf+0x68>
    1084:	24 e0       	ldi	r18, 0x04	; 4
    1086:	21 17       	cp	r18, r17
    1088:	10 f0       	brcs	.+4      	; 0x108e <dtoa_prf+0x70>
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <dtoa_prf+0x74>
    108e:	12 1b       	sub	r17, r18
    1090:	21 2f       	mov	r18, r17
    1092:	eb 2c       	mov	r14, r11
    1094:	b4 fe       	sbrs	r11, 4
    1096:	02 c0       	rjmp	.+4      	; 0x109c <dtoa_prf+0x7e>
    1098:	32 2f       	mov	r19, r18
    109a:	0a c0       	rjmp	.+20     	; 0x10b0 <dtoa_prf+0x92>
    109c:	f6 01       	movw	r30, r12
    109e:	32 2f       	mov	r19, r18
    10a0:	80 e2       	ldi	r24, 0x20	; 32
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <dtoa_prf+0x8a>
    10a4:	81 93       	st	Z+, r24
    10a6:	31 50       	subi	r19, 0x01	; 1
    10a8:	33 23       	and	r19, r19
    10aa:	e1 f7       	brne	.-8      	; 0x10a4 <dtoa_prf+0x86>
    10ac:	c2 0e       	add	r12, r18
    10ae:	d1 1c       	adc	r13, r1
    10b0:	aa 23       	and	r26, r26
    10b2:	19 f0       	breq	.+6      	; 0x10ba <dtoa_prf+0x9c>
    10b4:	f6 01       	movw	r30, r12
    10b6:	a1 93       	st	Z+, r26
    10b8:	6f 01       	movw	r12, r30
    10ba:	f6 01       	movw	r30, r12
    10bc:	31 96       	adiw	r30, 0x01	; 1
    10be:	e2 fe       	sbrs	r14, 2
    10c0:	05 c0       	rjmp	.+10     	; 0x10cc <dtoa_prf+0xae>
    10c2:	9e e4       	ldi	r25, 0x4E	; 78
    10c4:	d6 01       	movw	r26, r12
    10c6:	9c 93       	st	X, r25
    10c8:	81 e4       	ldi	r24, 0x41	; 65
    10ca:	04 c0       	rjmp	.+8      	; 0x10d4 <dtoa_prf+0xb6>
    10cc:	9e e6       	ldi	r25, 0x6E	; 110
    10ce:	d6 01       	movw	r26, r12
    10d0:	9c 93       	st	X, r25
    10d2:	81 e6       	ldi	r24, 0x61	; 97
    10d4:	11 96       	adiw	r26, 0x01	; 1
    10d6:	8c 93       	st	X, r24
    10d8:	91 83       	std	Z+1, r25	; 0x01
    10da:	32 96       	adiw	r30, 0x02	; 2
    10dc:	df 01       	movw	r26, r30
    10de:	83 2f       	mov	r24, r19
    10e0:	90 e2       	ldi	r25, 0x20	; 32
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <dtoa_prf+0xca>
    10e4:	9d 93       	st	X+, r25
    10e6:	81 50       	subi	r24, 0x01	; 1
    10e8:	88 23       	and	r24, r24
    10ea:	e1 f7       	brne	.-8      	; 0x10e4 <dtoa_prf+0xc6>
    10ec:	e3 0f       	add	r30, r19
    10ee:	f1 1d       	adc	r31, r1
    10f0:	40 c0       	rjmp	.+128    	; 0x1172 <dtoa_prf+0x154>
    10f2:	e2 fe       	sbrs	r14, 2
    10f4:	42 c0       	rjmp	.+132    	; 0x117a <dtoa_prf+0x15c>
    10f6:	aa 23       	and	r26, r26
    10f8:	11 f4       	brne	.+4      	; 0x10fe <dtoa_prf+0xe0>
    10fa:	23 e0       	ldi	r18, 0x03	; 3
    10fc:	01 c0       	rjmp	.+2      	; 0x1100 <dtoa_prf+0xe2>
    10fe:	24 e0       	ldi	r18, 0x04	; 4
    1100:	21 17       	cp	r18, r17
    1102:	10 f0       	brcs	.+4      	; 0x1108 <dtoa_prf+0xea>
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	02 c0       	rjmp	.+4      	; 0x110c <dtoa_prf+0xee>
    1108:	12 1b       	sub	r17, r18
    110a:	21 2f       	mov	r18, r17
    110c:	eb 2c       	mov	r14, r11
    110e:	b4 fe       	sbrs	r11, 4
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <dtoa_prf+0xf8>
    1112:	92 2f       	mov	r25, r18
    1114:	0a c0       	rjmp	.+20     	; 0x112a <dtoa_prf+0x10c>
    1116:	f6 01       	movw	r30, r12
    1118:	92 2f       	mov	r25, r18
    111a:	80 e2       	ldi	r24, 0x20	; 32
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <dtoa_prf+0x104>
    111e:	81 93       	st	Z+, r24
    1120:	91 50       	subi	r25, 0x01	; 1
    1122:	99 23       	and	r25, r25
    1124:	e1 f7       	brne	.-8      	; 0x111e <dtoa_prf+0x100>
    1126:	c2 0e       	add	r12, r18
    1128:	d1 1c       	adc	r13, r1
    112a:	aa 23       	and	r26, r26
    112c:	19 f0       	breq	.+6      	; 0x1134 <dtoa_prf+0x116>
    112e:	f6 01       	movw	r30, r12
    1130:	a1 93       	st	Z+, r26
    1132:	6f 01       	movw	r12, r30
    1134:	f6 01       	movw	r30, r12
    1136:	31 96       	adiw	r30, 0x01	; 1
    1138:	e2 fe       	sbrs	r14, 2
    113a:	08 c0       	rjmp	.+16     	; 0x114c <dtoa_prf+0x12e>
    113c:	89 e4       	ldi	r24, 0x49	; 73
    113e:	d6 01       	movw	r26, r12
    1140:	8c 93       	st	X, r24
    1142:	8e e4       	ldi	r24, 0x4E	; 78
    1144:	11 96       	adiw	r26, 0x01	; 1
    1146:	8c 93       	st	X, r24
    1148:	86 e4       	ldi	r24, 0x46	; 70
    114a:	07 c0       	rjmp	.+14     	; 0x115a <dtoa_prf+0x13c>
    114c:	89 e6       	ldi	r24, 0x69	; 105
    114e:	d6 01       	movw	r26, r12
    1150:	8c 93       	st	X, r24
    1152:	8e e6       	ldi	r24, 0x6E	; 110
    1154:	11 96       	adiw	r26, 0x01	; 1
    1156:	8c 93       	st	X, r24
    1158:	86 e6       	ldi	r24, 0x66	; 102
    115a:	81 83       	std	Z+1, r24	; 0x01
    115c:	32 96       	adiw	r30, 0x02	; 2
    115e:	df 01       	movw	r26, r30
    1160:	89 2f       	mov	r24, r25
    1162:	20 e2       	ldi	r18, 0x20	; 32
    1164:	02 c0       	rjmp	.+4      	; 0x116a <dtoa_prf+0x14c>
    1166:	2d 93       	st	X+, r18
    1168:	81 50       	subi	r24, 0x01	; 1
    116a:	88 23       	and	r24, r24
    116c:	e1 f7       	brne	.-8      	; 0x1166 <dtoa_prf+0x148>
    116e:	e9 0f       	add	r30, r25
    1170:	f1 1d       	adc	r31, r1
    1172:	10 82       	st	Z, r1
    1174:	2e ef       	ldi	r18, 0xFE	; 254
    1176:	3f ef       	ldi	r19, 0xFF	; 255
    1178:	af c0       	rjmp	.+350    	; 0x12d8 <dtoa_prf+0x2ba>
    117a:	16 16       	cp	r1, r22
    117c:	17 06       	cpc	r1, r23
    117e:	1c f0       	brlt	.+6      	; 0x1186 <dtoa_prf+0x168>
    1180:	41 e0       	ldi	r20, 0x01	; 1
    1182:	50 e0       	ldi	r21, 0x00	; 0
    1184:	03 c0       	rjmp	.+6      	; 0x118c <dtoa_prf+0x16e>
    1186:	ab 01       	movw	r20, r22
    1188:	4f 5f       	subi	r20, 0xFF	; 255
    118a:	5f 4f       	sbci	r21, 0xFF	; 255
    118c:	aa 20       	and	r10, r10
    118e:	19 f4       	brne	.+6      	; 0x1196 <dtoa_prf+0x178>
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	03 c0       	rjmp	.+6      	; 0x119c <dtoa_prf+0x17e>
    1196:	8a 2d       	mov	r24, r10
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	01 96       	adiw	r24, 0x01	; 1
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	aa 23       	and	r26, r26
    11a2:	11 f0       	breq	.+4      	; 0x11a8 <dtoa_prf+0x18a>
    11a4:	21 e0       	ldi	r18, 0x01	; 1
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	24 0f       	add	r18, r20
    11aa:	35 1f       	adc	r19, r21
    11ac:	28 0f       	add	r18, r24
    11ae:	39 1f       	adc	r19, r25
    11b0:	81 2f       	mov	r24, r17
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	28 17       	cp	r18, r24
    11b6:	39 07       	cpc	r19, r25
    11b8:	14 f0       	brlt	.+4      	; 0x11be <dtoa_prf+0x1a0>
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <dtoa_prf+0x1a4>
    11be:	12 1b       	sub	r17, r18
    11c0:	21 2f       	mov	r18, r17
    11c2:	4b 2d       	mov	r20, r11
    11c4:	50 e0       	ldi	r21, 0x00	; 0
    11c6:	ca 01       	movw	r24, r20
    11c8:	80 71       	andi	r24, 0x10	; 16
    11ca:	90 70       	andi	r25, 0x00	; 0
    11cc:	b4 fc       	sbrc	r11, 4
    11ce:	0d c0       	rjmp	.+26     	; 0x11ea <dtoa_prf+0x1cc>
    11d0:	b3 fc       	sbrc	r11, 3
    11d2:	0b c0       	rjmp	.+22     	; 0x11ea <dtoa_prf+0x1cc>
    11d4:	f6 01       	movw	r30, r12
    11d6:	32 2f       	mov	r19, r18
    11d8:	40 e2       	ldi	r20, 0x20	; 32
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <dtoa_prf+0x1c2>
    11dc:	41 93       	st	Z+, r20
    11de:	31 50       	subi	r19, 0x01	; 1
    11e0:	33 23       	and	r19, r19
    11e2:	e1 f7       	brne	.-8      	; 0x11dc <dtoa_prf+0x1be>
    11e4:	c2 0e       	add	r12, r18
    11e6:	d1 1c       	adc	r13, r1
    11e8:	01 c0       	rjmp	.+2      	; 0x11ec <dtoa_prf+0x1ce>
    11ea:	32 2f       	mov	r19, r18
    11ec:	aa 23       	and	r26, r26
    11ee:	19 f0       	breq	.+6      	; 0x11f6 <dtoa_prf+0x1d8>
    11f0:	f6 01       	movw	r30, r12
    11f2:	a1 93       	st	Z+, r26
    11f4:	6f 01       	movw	r12, r30
    11f6:	89 2b       	or	r24, r25
    11f8:	11 f0       	breq	.+4      	; 0x11fe <dtoa_prf+0x1e0>
    11fa:	13 2f       	mov	r17, r19
    11fc:	0a c0       	rjmp	.+20     	; 0x1212 <dtoa_prf+0x1f4>
    11fe:	f6 01       	movw	r30, r12
    1200:	13 2f       	mov	r17, r19
    1202:	80 e3       	ldi	r24, 0x30	; 48
    1204:	02 c0       	rjmp	.+4      	; 0x120a <dtoa_prf+0x1ec>
    1206:	81 93       	st	Z+, r24
    1208:	11 50       	subi	r17, 0x01	; 1
    120a:	11 23       	and	r17, r17
    120c:	e1 f7       	brne	.-8      	; 0x1206 <dtoa_prf+0x1e8>
    120e:	c3 0e       	add	r12, r19
    1210:	d1 1c       	adc	r13, r1
    1212:	09 2d       	mov	r16, r9
    1214:	06 0f       	add	r16, r22
    1216:	ba 80       	ldd	r11, Y+2	; 0x02
    1218:	90 e1       	ldi	r25, 0x10	; 16
    121a:	89 2e       	mov	r8, r25
    121c:	91 2c       	mov	r9, r1
    121e:	8e 20       	and	r8, r14
    1220:	9f 20       	and	r9, r15
    1222:	e4 fe       	sbrs	r14, 4
    1224:	04 c0       	rjmp	.+8      	; 0x122e <dtoa_prf+0x210>
    1226:	f1 e3       	ldi	r31, 0x31	; 49
    1228:	bf 16       	cp	r11, r31
    122a:	09 f4       	brne	.+2      	; 0x122e <dtoa_prf+0x210>
    122c:	01 50       	subi	r16, 0x01	; 1
    122e:	10 16       	cp	r1, r16
    1230:	14 f0       	brlt	.+4      	; 0x1236 <dtoa_prf+0x218>
    1232:	01 e0       	ldi	r16, 0x01	; 1
    1234:	03 c0       	rjmp	.+6      	; 0x123c <dtoa_prf+0x21e>
    1236:	09 30       	cpi	r16, 0x09	; 9
    1238:	08 f0       	brcs	.+2      	; 0x123c <dtoa_prf+0x21e>
    123a:	08 e0       	ldi	r16, 0x08	; 8
    123c:	9b 01       	movw	r18, r22
    123e:	77 ff       	sbrs	r23, 7
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <dtoa_prf+0x228>
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	cb 01       	movw	r24, r22
    1248:	01 96       	adiw	r24, 0x01	; 1
    124a:	82 1b       	sub	r24, r18
    124c:	93 0b       	sbc	r25, r19
    124e:	fe 01       	movw	r30, r28
    1250:	31 96       	adiw	r30, 0x01	; 1
    1252:	e8 0f       	add	r30, r24
    1254:	f9 1f       	adc	r31, r25
    1256:	8e e2       	ldi	r24, 0x2E	; 46
    1258:	f8 2e       	mov	r15, r24
    125a:	3b 01       	movw	r6, r22
    125c:	60 1a       	sub	r6, r16
    125e:	71 08       	sbc	r7, r1
    1260:	8a 2d       	mov	r24, r10
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	44 27       	eor	r20, r20
    1266:	55 27       	eor	r21, r21
    1268:	48 1b       	sub	r20, r24
    126a:	59 0b       	sbc	r21, r25
    126c:	8f ef       	ldi	r24, 0xFF	; 255
    126e:	2f 3f       	cpi	r18, 0xFF	; 255
    1270:	38 07       	cpc	r19, r24
    1272:	19 f4       	brne	.+6      	; 0x127a <dtoa_prf+0x25c>
    1274:	d6 01       	movw	r26, r12
    1276:	fd 92       	st	X+, r15
    1278:	6d 01       	movw	r12, r26
    127a:	62 17       	cp	r22, r18
    127c:	73 07       	cpc	r23, r19
    127e:	2c f0       	brlt	.+10     	; 0x128a <dtoa_prf+0x26c>
    1280:	62 16       	cp	r6, r18
    1282:	73 06       	cpc	r7, r19
    1284:	14 f4       	brge	.+4      	; 0x128a <dtoa_prf+0x26c>
    1286:	80 81       	ld	r24, Z
    1288:	01 c0       	rjmp	.+2      	; 0x128c <dtoa_prf+0x26e>
    128a:	80 e3       	ldi	r24, 0x30	; 48
    128c:	21 50       	subi	r18, 0x01	; 1
    128e:	30 40       	sbci	r19, 0x00	; 0
    1290:	31 96       	adiw	r30, 0x01	; 1
    1292:	24 17       	cp	r18, r20
    1294:	35 07       	cpc	r19, r21
    1296:	24 f0       	brlt	.+8      	; 0x12a0 <dtoa_prf+0x282>
    1298:	d6 01       	movw	r26, r12
    129a:	8d 93       	st	X+, r24
    129c:	6d 01       	movw	r12, r26
    129e:	e6 cf       	rjmp	.-52     	; 0x126c <dtoa_prf+0x24e>
    12a0:	26 17       	cp	r18, r22
    12a2:	37 07       	cpc	r19, r23
    12a4:	49 f4       	brne	.+18     	; 0x12b8 <dtoa_prf+0x29a>
    12a6:	b5 e3       	ldi	r27, 0x35	; 53
    12a8:	bb 15       	cp	r27, r11
    12aa:	28 f0       	brcs	.+10     	; 0x12b6 <dtoa_prf+0x298>
    12ac:	bb 16       	cp	r11, r27
    12ae:	21 f4       	brne	.+8      	; 0x12b8 <dtoa_prf+0x29a>
    12b0:	81 14       	cp	r8, r1
    12b2:	91 04       	cpc	r9, r1
    12b4:	09 f4       	brne	.+2      	; 0x12b8 <dtoa_prf+0x29a>
    12b6:	81 e3       	ldi	r24, 0x31	; 49
    12b8:	f6 01       	movw	r30, r12
    12ba:	81 93       	st	Z+, r24
    12bc:	d6 01       	movw	r26, r12
    12be:	81 2f       	mov	r24, r17
    12c0:	90 e2       	ldi	r25, 0x20	; 32
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <dtoa_prf+0x2aa>
    12c4:	9c 93       	st	X, r25
    12c6:	81 50       	subi	r24, 0x01	; 1
    12c8:	11 96       	adiw	r26, 0x01	; 1
    12ca:	88 23       	and	r24, r24
    12cc:	d9 f7       	brne	.-10     	; 0x12c4 <dtoa_prf+0x2a6>
    12ce:	e1 0f       	add	r30, r17
    12d0:	f1 1d       	adc	r31, r1
    12d2:	10 82       	st	Z, r1
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	c9 01       	movw	r24, r18
    12da:	29 96       	adiw	r28, 0x09	; 9
    12dc:	ee e0       	ldi	r30, 0x0E	; 14
    12de:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__epilogue_restores__+0x8>

000012e2 <__ftoa_engine>:
    12e2:	28 30       	cpi	r18, 0x08	; 8
    12e4:	08 f0       	brcs	.+2      	; 0x12e8 <__ftoa_engine+0x6>
    12e6:	27 e0       	ldi	r18, 0x07	; 7
    12e8:	33 27       	eor	r19, r19
    12ea:	da 01       	movw	r26, r20
    12ec:	99 0f       	add	r25, r25
    12ee:	31 1d       	adc	r19, r1
    12f0:	87 fd       	sbrc	r24, 7
    12f2:	91 60       	ori	r25, 0x01	; 1
    12f4:	00 96       	adiw	r24, 0x00	; 0
    12f6:	61 05       	cpc	r22, r1
    12f8:	71 05       	cpc	r23, r1
    12fa:	39 f4       	brne	.+14     	; 0x130a <__ftoa_engine+0x28>
    12fc:	32 60       	ori	r19, 0x02	; 2
    12fe:	2e 5f       	subi	r18, 0xFE	; 254
    1300:	3d 93       	st	X+, r19
    1302:	30 e3       	ldi	r19, 0x30	; 48
    1304:	2a 95       	dec	r18
    1306:	e1 f7       	brne	.-8      	; 0x1300 <__ftoa_engine+0x1e>
    1308:	08 95       	ret
    130a:	9f 3f       	cpi	r25, 0xFF	; 255
    130c:	30 f0       	brcs	.+12     	; 0x131a <__ftoa_engine+0x38>
    130e:	80 38       	cpi	r24, 0x80	; 128
    1310:	71 05       	cpc	r23, r1
    1312:	61 05       	cpc	r22, r1
    1314:	09 f0       	breq	.+2      	; 0x1318 <__ftoa_engine+0x36>
    1316:	3c 5f       	subi	r19, 0xFC	; 252
    1318:	3c 5f       	subi	r19, 0xFC	; 252
    131a:	3d 93       	st	X+, r19
    131c:	91 30       	cpi	r25, 0x01	; 1
    131e:	08 f0       	brcs	.+2      	; 0x1322 <__ftoa_engine+0x40>
    1320:	80 68       	ori	r24, 0x80	; 128
    1322:	91 1d       	adc	r25, r1
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	1f 93       	push	r17
    132a:	0f 93       	push	r16
    132c:	ff 92       	push	r15
    132e:	ef 92       	push	r14
    1330:	19 2f       	mov	r17, r25
    1332:	98 7f       	andi	r25, 0xF8	; 248
    1334:	96 95       	lsr	r25
    1336:	e9 2f       	mov	r30, r25
    1338:	96 95       	lsr	r25
    133a:	96 95       	lsr	r25
    133c:	e9 0f       	add	r30, r25
    133e:	ff 27       	eor	r31, r31
    1340:	e2 55       	subi	r30, 0x52	; 82
    1342:	ff 4f       	sbci	r31, 0xFF	; 255
    1344:	99 27       	eor	r25, r25
    1346:	33 27       	eor	r19, r19
    1348:	ee 24       	eor	r14, r14
    134a:	ff 24       	eor	r15, r15
    134c:	a7 01       	movw	r20, r14
    134e:	e7 01       	movw	r28, r14
    1350:	05 90       	lpm	r0, Z+
    1352:	08 94       	sec
    1354:	07 94       	ror	r0
    1356:	28 f4       	brcc	.+10     	; 0x1362 <__ftoa_engine+0x80>
    1358:	36 0f       	add	r19, r22
    135a:	e7 1e       	adc	r14, r23
    135c:	f8 1e       	adc	r15, r24
    135e:	49 1f       	adc	r20, r25
    1360:	51 1d       	adc	r21, r1
    1362:	66 0f       	add	r22, r22
    1364:	77 1f       	adc	r23, r23
    1366:	88 1f       	adc	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	06 94       	lsr	r0
    136c:	a1 f7       	brne	.-24     	; 0x1356 <__ftoa_engine+0x74>
    136e:	05 90       	lpm	r0, Z+
    1370:	07 94       	ror	r0
    1372:	28 f4       	brcc	.+10     	; 0x137e <__ftoa_engine+0x9c>
    1374:	e7 0e       	add	r14, r23
    1376:	f8 1e       	adc	r15, r24
    1378:	49 1f       	adc	r20, r25
    137a:	56 1f       	adc	r21, r22
    137c:	c1 1d       	adc	r28, r1
    137e:	77 0f       	add	r23, r23
    1380:	88 1f       	adc	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	66 1f       	adc	r22, r22
    1386:	06 94       	lsr	r0
    1388:	a1 f7       	brne	.-24     	; 0x1372 <__ftoa_engine+0x90>
    138a:	05 90       	lpm	r0, Z+
    138c:	07 94       	ror	r0
    138e:	28 f4       	brcc	.+10     	; 0x139a <__ftoa_engine+0xb8>
    1390:	f8 0e       	add	r15, r24
    1392:	49 1f       	adc	r20, r25
    1394:	56 1f       	adc	r21, r22
    1396:	c7 1f       	adc	r28, r23
    1398:	d1 1d       	adc	r29, r1
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	66 1f       	adc	r22, r22
    13a0:	77 1f       	adc	r23, r23
    13a2:	06 94       	lsr	r0
    13a4:	a1 f7       	brne	.-24     	; 0x138e <__ftoa_engine+0xac>
    13a6:	05 90       	lpm	r0, Z+
    13a8:	07 94       	ror	r0
    13aa:	20 f4       	brcc	.+8      	; 0x13b4 <__ftoa_engine+0xd2>
    13ac:	49 0f       	add	r20, r25
    13ae:	56 1f       	adc	r21, r22
    13b0:	c7 1f       	adc	r28, r23
    13b2:	d8 1f       	adc	r29, r24
    13b4:	99 0f       	add	r25, r25
    13b6:	66 1f       	adc	r22, r22
    13b8:	77 1f       	adc	r23, r23
    13ba:	88 1f       	adc	r24, r24
    13bc:	06 94       	lsr	r0
    13be:	a9 f7       	brne	.-22     	; 0x13aa <__ftoa_engine+0xc8>
    13c0:	84 91       	lpm	r24, Z+
    13c2:	10 95       	com	r17
    13c4:	17 70       	andi	r17, 0x07	; 7
    13c6:	41 f0       	breq	.+16     	; 0x13d8 <__ftoa_engine+0xf6>
    13c8:	d6 95       	lsr	r29
    13ca:	c7 95       	ror	r28
    13cc:	57 95       	ror	r21
    13ce:	47 95       	ror	r20
    13d0:	f7 94       	ror	r15
    13d2:	e7 94       	ror	r14
    13d4:	1a 95       	dec	r17
    13d6:	c1 f7       	brne	.-16     	; 0x13c8 <__ftoa_engine+0xe6>
    13d8:	e4 e5       	ldi	r30, 0x54	; 84
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	68 94       	set
    13de:	15 90       	lpm	r1, Z+
    13e0:	15 91       	lpm	r17, Z+
    13e2:	35 91       	lpm	r19, Z+
    13e4:	65 91       	lpm	r22, Z+
    13e6:	95 91       	lpm	r25, Z+
    13e8:	05 90       	lpm	r0, Z+
    13ea:	7f e2       	ldi	r23, 0x2F	; 47
    13ec:	73 95       	inc	r23
    13ee:	e1 18       	sub	r14, r1
    13f0:	f1 0a       	sbc	r15, r17
    13f2:	43 0b       	sbc	r20, r19
    13f4:	56 0b       	sbc	r21, r22
    13f6:	c9 0b       	sbc	r28, r25
    13f8:	d0 09       	sbc	r29, r0
    13fa:	c0 f7       	brcc	.-16     	; 0x13ec <__ftoa_engine+0x10a>
    13fc:	e1 0c       	add	r14, r1
    13fe:	f1 1e       	adc	r15, r17
    1400:	43 1f       	adc	r20, r19
    1402:	56 1f       	adc	r21, r22
    1404:	c9 1f       	adc	r28, r25
    1406:	d0 1d       	adc	r29, r0
    1408:	7e f4       	brtc	.+30     	; 0x1428 <__ftoa_engine+0x146>
    140a:	70 33       	cpi	r23, 0x30	; 48
    140c:	11 f4       	brne	.+4      	; 0x1412 <__ftoa_engine+0x130>
    140e:	8a 95       	dec	r24
    1410:	e6 cf       	rjmp	.-52     	; 0x13de <__ftoa_engine+0xfc>
    1412:	e8 94       	clt
    1414:	01 50       	subi	r16, 0x01	; 1
    1416:	30 f0       	brcs	.+12     	; 0x1424 <__ftoa_engine+0x142>
    1418:	08 0f       	add	r16, r24
    141a:	0a f4       	brpl	.+2      	; 0x141e <__ftoa_engine+0x13c>
    141c:	00 27       	eor	r16, r16
    141e:	02 17       	cp	r16, r18
    1420:	08 f4       	brcc	.+2      	; 0x1424 <__ftoa_engine+0x142>
    1422:	20 2f       	mov	r18, r16
    1424:	23 95       	inc	r18
    1426:	02 2f       	mov	r16, r18
    1428:	7a 33       	cpi	r23, 0x3A	; 58
    142a:	28 f0       	brcs	.+10     	; 0x1436 <__ftoa_engine+0x154>
    142c:	79 e3       	ldi	r23, 0x39	; 57
    142e:	7d 93       	st	X+, r23
    1430:	2a 95       	dec	r18
    1432:	e9 f7       	brne	.-6      	; 0x142e <__ftoa_engine+0x14c>
    1434:	10 c0       	rjmp	.+32     	; 0x1456 <__ftoa_engine+0x174>
    1436:	7d 93       	st	X+, r23
    1438:	2a 95       	dec	r18
    143a:	89 f6       	brne	.-94     	; 0x13de <__ftoa_engine+0xfc>
    143c:	06 94       	lsr	r0
    143e:	97 95       	ror	r25
    1440:	67 95       	ror	r22
    1442:	37 95       	ror	r19
    1444:	17 95       	ror	r17
    1446:	17 94       	ror	r1
    1448:	e1 18       	sub	r14, r1
    144a:	f1 0a       	sbc	r15, r17
    144c:	43 0b       	sbc	r20, r19
    144e:	56 0b       	sbc	r21, r22
    1450:	c9 0b       	sbc	r28, r25
    1452:	d0 09       	sbc	r29, r0
    1454:	98 f0       	brcs	.+38     	; 0x147c <__ftoa_engine+0x19a>
    1456:	23 95       	inc	r18
    1458:	7e 91       	ld	r23, -X
    145a:	73 95       	inc	r23
    145c:	7a 33       	cpi	r23, 0x3A	; 58
    145e:	08 f0       	brcs	.+2      	; 0x1462 <__ftoa_engine+0x180>
    1460:	70 e3       	ldi	r23, 0x30	; 48
    1462:	7c 93       	st	X, r23
    1464:	20 13       	cpse	r18, r16
    1466:	b8 f7       	brcc	.-18     	; 0x1456 <__ftoa_engine+0x174>
    1468:	7e 91       	ld	r23, -X
    146a:	70 61       	ori	r23, 0x10	; 16
    146c:	7d 93       	st	X+, r23
    146e:	30 f0       	brcs	.+12     	; 0x147c <__ftoa_engine+0x19a>
    1470:	83 95       	inc	r24
    1472:	71 e3       	ldi	r23, 0x31	; 49
    1474:	7d 93       	st	X+, r23
    1476:	70 e3       	ldi	r23, 0x30	; 48
    1478:	2a 95       	dec	r18
    147a:	e1 f7       	brne	.-8      	; 0x1474 <__ftoa_engine+0x192>
    147c:	11 24       	eor	r1, r1
    147e:	ef 90       	pop	r14
    1480:	ff 90       	pop	r15
    1482:	0f 91       	pop	r16
    1484:	1f 91       	pop	r17
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	99 27       	eor	r25, r25
    148c:	87 fd       	sbrc	r24, 7
    148e:	90 95       	com	r25
    1490:	08 95       	ret

00001492 <strrev>:
    1492:	dc 01       	movw	r26, r24
    1494:	fc 01       	movw	r30, r24
    1496:	67 2f       	mov	r22, r23
    1498:	71 91       	ld	r23, Z+
    149a:	77 23       	and	r23, r23
    149c:	e1 f7       	brne	.-8      	; 0x1496 <strrev+0x4>
    149e:	32 97       	sbiw	r30, 0x02	; 2
    14a0:	04 c0       	rjmp	.+8      	; 0x14aa <strrev+0x18>
    14a2:	7c 91       	ld	r23, X
    14a4:	6d 93       	st	X+, r22
    14a6:	70 83       	st	Z, r23
    14a8:	62 91       	ld	r22, -Z
    14aa:	ae 17       	cp	r26, r30
    14ac:	bf 07       	cpc	r27, r31
    14ae:	c8 f3       	brcs	.-14     	; 0x14a2 <strrev+0x10>
    14b0:	08 95       	ret

000014b2 <__udivmodhi4>:
    14b2:	aa 1b       	sub	r26, r26
    14b4:	bb 1b       	sub	r27, r27
    14b6:	51 e1       	ldi	r21, 0x11	; 17
    14b8:	07 c0       	rjmp	.+14     	; 0x14c8 <__udivmodhi4_ep>

000014ba <__udivmodhi4_loop>:
    14ba:	aa 1f       	adc	r26, r26
    14bc:	bb 1f       	adc	r27, r27
    14be:	a6 17       	cp	r26, r22
    14c0:	b7 07       	cpc	r27, r23
    14c2:	10 f0       	brcs	.+4      	; 0x14c8 <__udivmodhi4_ep>
    14c4:	a6 1b       	sub	r26, r22
    14c6:	b7 0b       	sbc	r27, r23

000014c8 <__udivmodhi4_ep>:
    14c8:	88 1f       	adc	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	5a 95       	dec	r21
    14ce:	a9 f7       	brne	.-22     	; 0x14ba <__udivmodhi4_loop>
    14d0:	80 95       	com	r24
    14d2:	90 95       	com	r25
    14d4:	bc 01       	movw	r22, r24
    14d6:	cd 01       	movw	r24, r26
    14d8:	08 95       	ret

000014da <__prologue_saves__>:
    14da:	2f 92       	push	r2
    14dc:	3f 92       	push	r3
    14de:	4f 92       	push	r4
    14e0:	5f 92       	push	r5
    14e2:	6f 92       	push	r6
    14e4:	7f 92       	push	r7
    14e6:	8f 92       	push	r8
    14e8:	9f 92       	push	r9
    14ea:	af 92       	push	r10
    14ec:	bf 92       	push	r11
    14ee:	cf 92       	push	r12
    14f0:	df 92       	push	r13
    14f2:	ef 92       	push	r14
    14f4:	ff 92       	push	r15
    14f6:	0f 93       	push	r16
    14f8:	1f 93       	push	r17
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	ca 1b       	sub	r28, r26
    1504:	db 0b       	sbc	r29, r27
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	de bf       	out	0x3e, r29	; 62
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	cd bf       	out	0x3d, r28	; 61
    1510:	09 94       	ijmp

00001512 <__epilogue_restores__>:
    1512:	2a 88       	ldd	r2, Y+18	; 0x12
    1514:	39 88       	ldd	r3, Y+17	; 0x11
    1516:	48 88       	ldd	r4, Y+16	; 0x10
    1518:	5f 84       	ldd	r5, Y+15	; 0x0f
    151a:	6e 84       	ldd	r6, Y+14	; 0x0e
    151c:	7d 84       	ldd	r7, Y+13	; 0x0d
    151e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1520:	9b 84       	ldd	r9, Y+11	; 0x0b
    1522:	aa 84       	ldd	r10, Y+10	; 0x0a
    1524:	b9 84       	ldd	r11, Y+9	; 0x09
    1526:	c8 84       	ldd	r12, Y+8	; 0x08
    1528:	df 80       	ldd	r13, Y+7	; 0x07
    152a:	ee 80       	ldd	r14, Y+6	; 0x06
    152c:	fd 80       	ldd	r15, Y+5	; 0x05
    152e:	0c 81       	ldd	r16, Y+4	; 0x04
    1530:	1b 81       	ldd	r17, Y+3	; 0x03
    1532:	aa 81       	ldd	r26, Y+2	; 0x02
    1534:	b9 81       	ldd	r27, Y+1	; 0x01
    1536:	ce 0f       	add	r28, r30
    1538:	d1 1d       	adc	r29, r1
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	ed 01       	movw	r28, r26
    1546:	08 95       	ret

00001548 <_exit>:
    1548:	f8 94       	cli

0000154a <__stop_program>:
    154a:	ff cf       	rjmp	.-2      	; 0x154a <__stop_program>
